/// Vulkan D bindings generated by vkdgen.py for Gfx-d
module gfx.bindings.vulkan.vk;

version(linux) {
    import wayland.native.client;
    alias wl_surface = wl_proxy;
}

enum VK_HEADER_VERSION =  67;

// Basic types definition

alias uint8_t  = ubyte;
alias uint16_t = ushort;
alias uint32_t = uint;
alias uint64_t = ulong;
alias int8_t   = byte;
alias int16_t  = short;
alias int32_t  = int;
alias int64_t  = long;

// VK_VERSION_1_0
alias VkFlags                                 = uint32_t;
alias VkInstanceCreateFlags                   = VkFlags;
alias VkBool32                                = uint32_t;
alias VkFormatFeatureFlags                    = VkFlags;
alias VkImageUsageFlags                       = VkFlags;
alias VkImageCreateFlags                      = VkFlags;
alias VkSampleCountFlags                      = VkFlags;
alias VkDeviceSize                            = uint64_t;
alias VkQueueFlags                            = VkFlags;
alias VkMemoryPropertyFlags                   = VkFlags;
alias VkMemoryHeapFlags                       = VkFlags;
alias VkDeviceCreateFlags                     = VkFlags;
alias VkDeviceQueueCreateFlags                = VkFlags;
alias VkPipelineStageFlags                    = VkFlags;
alias VkMemoryMapFlags                        = VkFlags;
alias VkImageAspectFlags                      = VkFlags;
alias VkSparseImageFormatFlags                = VkFlags;
alias VkSparseMemoryBindFlags                 = VkFlags;
alias VkFenceCreateFlags                      = VkFlags;
alias VkSemaphoreCreateFlags                  = VkFlags;
alias VkEventCreateFlags                      = VkFlags;
alias VkQueryPoolCreateFlags                  = VkFlags;
alias VkQueryPipelineStatisticFlags           = VkFlags;
alias VkQueryResultFlags                      = VkFlags;
alias VkBufferCreateFlags                     = VkFlags;
alias VkBufferUsageFlags                      = VkFlags;
alias VkBufferViewCreateFlags                 = VkFlags;
alias VkImageViewCreateFlags                  = VkFlags;
alias VkShaderModuleCreateFlags               = VkFlags;
alias VkPipelineCacheCreateFlags              = VkFlags;
alias VkPipelineCreateFlags                   = VkFlags;
alias VkPipelineShaderStageCreateFlags        = VkFlags;
alias VkPipelineVertexInputStateCreateFlags   = VkFlags;
alias VkPipelineInputAssemblyStateCreateFlags = VkFlags;
alias VkPipelineTessellationStateCreateFlags  = VkFlags;
alias VkPipelineViewportStateCreateFlags      = VkFlags;
alias VkPipelineRasterizationStateCreateFlags = VkFlags;
alias VkCullModeFlags                         = VkFlags;
alias VkPipelineMultisampleStateCreateFlags   = VkFlags;
alias VkSampleMask                            = uint32_t;
alias VkPipelineDepthStencilStateCreateFlags  = VkFlags;
alias VkPipelineColorBlendStateCreateFlags    = VkFlags;
alias VkColorComponentFlags                   = VkFlags;
alias VkPipelineDynamicStateCreateFlags       = VkFlags;
alias VkPipelineLayoutCreateFlags             = VkFlags;
alias VkShaderStageFlags                      = VkFlags;
alias VkSamplerCreateFlags                    = VkFlags;
alias VkDescriptorSetLayoutCreateFlags        = VkFlags;
alias VkDescriptorPoolCreateFlags             = VkFlags;
alias VkDescriptorPoolResetFlags              = VkFlags;
alias VkFramebufferCreateFlags                = VkFlags;
alias VkRenderPassCreateFlags                 = VkFlags;
alias VkAttachmentDescriptionFlags            = VkFlags;
alias VkSubpassDescriptionFlags               = VkFlags;
alias VkAccessFlags                           = VkFlags;
alias VkDependencyFlags                       = VkFlags;
alias VkCommandPoolCreateFlags                = VkFlags;
alias VkCommandPoolResetFlags                 = VkFlags;
alias VkCommandBufferUsageFlags               = VkFlags;
alias VkQueryControlFlags                     = VkFlags;
alias VkCommandBufferResetFlags               = VkFlags;
alias VkStencilFaceFlags                      = VkFlags;

// VK_KHR_surface
alias VkSurfaceTransformFlagsKHR = VkFlags;
alias VkCompositeAlphaFlagsKHR   = VkFlags;

// VK_KHR_swapchain
alias VkSwapchainCreateFlagsKHR = VkFlags;

// VK_KHR_display
alias VkDisplayPlaneAlphaFlagsKHR    = VkFlags;
alias VkDisplayModeCreateFlagsKHR    = VkFlags;
alias VkDisplaySurfaceCreateFlagsKHR = VkFlags;

// VK_KHR_wayland_surface
version(linux) {
    alias VkWaylandSurfaceCreateFlagsKHR = VkFlags;
}

// Handles

// VK_VERSION_1_0
struct VkInstance_T;       alias VkInstance       = VkInstance_T*;
struct VkPhysicalDevice_T; alias VkPhysicalDevice = VkPhysicalDevice_T*;
struct VkDevice_T;         alias VkDevice         = VkDevice_T*;
struct VkQueue_T;          alias VkQueue          = VkQueue_T*;
struct VkCommandBuffer_T;  alias VkCommandBuffer  = VkCommandBuffer_T*;

// Non-dispatchable handles

version(X86_64) {
    // VK_VERSION_1_0
    struct VkSemaphore_T;           alias VkSemaphore           = VkSemaphore_T*;
    struct VkFence_T;               alias VkFence               = VkFence_T*;
    struct VkDeviceMemory_T;        alias VkDeviceMemory        = VkDeviceMemory_T*;
    struct VkBuffer_T;              alias VkBuffer              = VkBuffer_T*;
    struct VkImage_T;               alias VkImage               = VkImage_T*;
    struct VkEvent_T;               alias VkEvent               = VkEvent_T*;
    struct VkQueryPool_T;           alias VkQueryPool           = VkQueryPool_T*;
    struct VkBufferView_T;          alias VkBufferView          = VkBufferView_T*;
    struct VkImageView_T;           alias VkImageView           = VkImageView_T*;
    struct VkShaderModule_T;        alias VkShaderModule        = VkShaderModule_T*;
    struct VkPipelineCache_T;       alias VkPipelineCache       = VkPipelineCache_T*;
    struct VkPipelineLayout_T;      alias VkPipelineLayout      = VkPipelineLayout_T*;
    struct VkRenderPass_T;          alias VkRenderPass          = VkRenderPass_T*;
    struct VkPipeline_T;            alias VkPipeline            = VkPipeline_T*;
    struct VkDescriptorSetLayout_T; alias VkDescriptorSetLayout = VkDescriptorSetLayout_T*;
    struct VkSampler_T;             alias VkSampler             = VkSampler_T*;
    struct VkDescriptorPool_T;      alias VkDescriptorPool      = VkDescriptorPool_T*;
    struct VkDescriptorSet_T;       alias VkDescriptorSet       = VkDescriptorSet_T*;
    struct VkFramebuffer_T;         alias VkFramebuffer         = VkFramebuffer_T*;
    struct VkCommandPool_T;         alias VkCommandPool         = VkCommandPool_T*;

    // VK_KHR_surface
    struct VkSurfaceKHR_T; alias VkSurfaceKHR = VkSurfaceKHR_T*;

    // VK_KHR_swapchain
    struct VkSwapchainKHR_T; alias VkSwapchainKHR = VkSwapchainKHR_T*;

    // VK_KHR_display
    struct VkDisplayKHR_T;     alias VkDisplayKHR     = VkDisplayKHR_T*;
    struct VkDisplayModeKHR_T; alias VkDisplayModeKHR = VkDisplayModeKHR_T*;
}
else {
    // VK_VERSION_1_0
    alias VkSemaphore           = ulong;
    alias VkFence               = ulong;
    alias VkDeviceMemory        = ulong;
    alias VkBuffer              = ulong;
    alias VkImage               = ulong;
    alias VkEvent               = ulong;
    alias VkQueryPool           = ulong;
    alias VkBufferView          = ulong;
    alias VkImageView           = ulong;
    alias VkShaderModule        = ulong;
    alias VkPipelineCache       = ulong;
    alias VkPipelineLayout      = ulong;
    alias VkRenderPass          = ulong;
    alias VkPipeline            = ulong;
    alias VkDescriptorSetLayout = ulong;
    alias VkSampler             = ulong;
    alias VkDescriptorPool      = ulong;
    alias VkDescriptorSet       = ulong;
    alias VkFramebuffer         = ulong;
    alias VkCommandPool         = ulong;

    // VK_KHR_surface
    alias VkSurfaceKHR = ulong;

    // VK_KHR_swapchain
    alias VkSwapchainKHR = ulong;

    // VK_KHR_display
    alias VkDisplayKHR     = ulong;
    alias VkDisplayModeKHR = ulong;
}

// Constants

// VK_VERSION_1_0
enum VK_LOD_CLAMP_NONE                = 1000.0f;
enum VK_REMAINING_MIP_LEVELS          = ~0;
enum VK_REMAINING_ARRAY_LAYERS        = ~0;
enum VK_WHOLE_SIZE                    = ~0;
enum VK_ATTACHMENT_UNUSED             = ~0;
enum VK_TRUE                          = 1;
enum VK_FALSE                         = 0;
enum VK_QUEUE_FAMILY_IGNORED          = ~0;
enum VK_SUBPASS_EXTERNAL              = ~0;
enum VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
enum VK_UUID_SIZE                     = 16;
enum VK_MAX_MEMORY_TYPES              = 32;
enum VK_MAX_MEMORY_HEAPS              = 16;
enum VK_MAX_EXTENSION_NAME_SIZE       = 256;
enum VK_MAX_DESCRIPTION_SIZE          = 256;

// VK_KHR_surface
enum VK_KHR_SURFACE_SPEC_VERSION      = 25;
enum VK_KHR_SURFACE_EXTENSION_NAME    = "VK_KHR_surface";
enum VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;

// VK_KHR_swapchain
enum VK_KHR_SWAPCHAIN_SPEC_VERSION   = 68;
enum VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";

// VK_KHR_display
enum VK_KHR_DISPLAY_SPEC_VERSION   = 21;
enum VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";

// VK_KHR_wayland_surface
version(linux) {
    enum VK_KHR_WAYLAND_SURFACE_SPEC_VERSION   = 6;
    enum VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME = "VK_KHR_wayland_surface";
}

// Function pointers

// VK_VERSION_1_0
alias PFN_vkAllocationFunction = void* function(void* pUserData, size_t size, size_t alignment, VkSystemAllocationScope allocationScope);
alias PFN_vkReallocationFunction = void* function(void* pUserData, void* pOriginal, size_t size, size_t alignment, VkSystemAllocationScope allocationScope);
alias PFN_vkFreeFunction = void function(void* pUserData, void* pMemory);
alias PFN_vkInternalAllocationNotification = void function(void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope);
alias PFN_vkInternalFreeNotification = void function(void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope);
alias PFN_vkVoidFunction = void function();

// Enumerations

// VK_VERSION_1_0
enum VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
}
enum VK_PIPELINE_CACHE_HEADER_VERSION_ONE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE;

enum VkResult {
    VK_SUCCESS                           = 0,
    VK_NOT_READY                         = 1,
    VK_TIMEOUT                           = 2,
    VK_EVENT_SET                         = 3,
    VK_EVENT_RESET                       = 4,
    VK_INCOMPLETE                        = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY          = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY        = -2,
    VK_ERROR_INITIALIZATION_FAILED       = -3,
    VK_ERROR_DEVICE_LOST                 = -4,
    VK_ERROR_MEMORY_MAP_FAILED           = -5,
    VK_ERROR_LAYER_NOT_PRESENT           = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT       = -7,
    VK_ERROR_FEATURE_NOT_PRESENT         = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER         = -9,
    VK_ERROR_TOO_MANY_OBJECTS            = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED        = -11,
    VK_ERROR_FRAGMENTED_POOL             = -12,
    VK_ERROR_SURFACE_LOST_KHR            = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR    = -1000000001,
    VK_SUBOPTIMAL_KHR                    = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR             = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR    = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT       = -1000011001,
    VK_ERROR_INVALID_SHADER_NV           = -1000012000,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR      = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003,
    VK_ERROR_NOT_PERMITTED_EXT           = -1000174001,
}
enum VK_SUCCESS                           = VkResult.VK_SUCCESS;
enum VK_NOT_READY                         = VkResult.VK_NOT_READY;
enum VK_TIMEOUT                           = VkResult.VK_TIMEOUT;
enum VK_EVENT_SET                         = VkResult.VK_EVENT_SET;
enum VK_EVENT_RESET                       = VkResult.VK_EVENT_RESET;
enum VK_INCOMPLETE                        = VkResult.VK_INCOMPLETE;
enum VK_ERROR_OUT_OF_HOST_MEMORY          = VkResult.VK_ERROR_OUT_OF_HOST_MEMORY;
enum VK_ERROR_OUT_OF_DEVICE_MEMORY        = VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY;
enum VK_ERROR_INITIALIZATION_FAILED       = VkResult.VK_ERROR_INITIALIZATION_FAILED;
enum VK_ERROR_DEVICE_LOST                 = VkResult.VK_ERROR_DEVICE_LOST;
enum VK_ERROR_MEMORY_MAP_FAILED           = VkResult.VK_ERROR_MEMORY_MAP_FAILED;
enum VK_ERROR_LAYER_NOT_PRESENT           = VkResult.VK_ERROR_LAYER_NOT_PRESENT;
enum VK_ERROR_EXTENSION_NOT_PRESENT       = VkResult.VK_ERROR_EXTENSION_NOT_PRESENT;
enum VK_ERROR_FEATURE_NOT_PRESENT         = VkResult.VK_ERROR_FEATURE_NOT_PRESENT;
enum VK_ERROR_INCOMPATIBLE_DRIVER         = VkResult.VK_ERROR_INCOMPATIBLE_DRIVER;
enum VK_ERROR_TOO_MANY_OBJECTS            = VkResult.VK_ERROR_TOO_MANY_OBJECTS;
enum VK_ERROR_FORMAT_NOT_SUPPORTED        = VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED;
enum VK_ERROR_FRAGMENTED_POOL             = VkResult.VK_ERROR_FRAGMENTED_POOL;
enum VK_ERROR_SURFACE_LOST_KHR            = VkResult.VK_ERROR_SURFACE_LOST_KHR;
enum VK_ERROR_NATIVE_WINDOW_IN_USE_KHR    = VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR;
enum VK_SUBOPTIMAL_KHR                    = VkResult.VK_SUBOPTIMAL_KHR;
enum VK_ERROR_OUT_OF_DATE_KHR             = VkResult.VK_ERROR_OUT_OF_DATE_KHR;
enum VK_ERROR_INCOMPATIBLE_DISPLAY_KHR    = VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR;
enum VK_ERROR_VALIDATION_FAILED_EXT       = VkResult.VK_ERROR_VALIDATION_FAILED_EXT;
enum VK_ERROR_INVALID_SHADER_NV           = VkResult.VK_ERROR_INVALID_SHADER_NV;
enum VK_ERROR_OUT_OF_POOL_MEMORY_KHR      = VkResult.VK_ERROR_OUT_OF_POOL_MEMORY_KHR;
enum VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR;
enum VK_ERROR_NOT_PERMITTED_EXT           = VkResult.VK_ERROR_NOT_PERMITTED_EXT;

enum VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO                                             = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO                                         = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO                                     = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO                                           = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO                                                  = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO                                         = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE                                          = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO                                             = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO                                            = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO                                        = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO                                            = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO                                       = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO                                           = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO                                      = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO                                            = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO                                       = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO                                    = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO                                   = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO                            = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                      = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO                    = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO                      = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO                          = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO                     = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                       = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                     = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                       = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO                           = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO                                = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO                                 = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO                                  = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO                                          = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO                            = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO                                  = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO                                 = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET                                         = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET                                          = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO                                      = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO                                      = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO                                     = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO                                 = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO                              = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO                                    = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO                                       = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER                                        = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER                                         = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER                                               = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO                                  = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO                                    = 48,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR                                    = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR                                             = 1000001001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR                                 = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR                              = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR                                     = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR                                 = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR                                  = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR                              = 1000006000,
    VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR                                  = 1000007000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR                              = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR                                = 1000009000,
    VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID                                        = 1000010000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT                        = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD         = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT                            = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT                             = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT                                 = 1000022002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV                    = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV                   = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV                 = 1000026002,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD                     = 1000041000,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX                        = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX                       = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX                     = 1000053002,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV                         = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV                               = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV                           = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV                           = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV                    = 1000058000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR                               = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR                             = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR                                      = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR                                = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR                      = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR                                = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR                      = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR                         = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR               = 1000059008,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX                               = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX                      = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX                   = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX                                 = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX                            = 1000060006,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX                                  = 1000060010,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHX                     = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHX                      = 1000060014,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX                        = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX                              = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX                         = 1000060009,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX                                = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX                       = 1000060012,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT                                         = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN                                    = 1000062000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX                         = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX                          = 1000070001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR               = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR                         = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR                     = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR                               = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR                            = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR                       = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR                        = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR                              = 1000072002,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR                          = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR                          = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR                           = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR                             = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR                                    = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR                                     = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR                                       = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR                   = 1000075000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR                  = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR                            = 1000076001,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR                             = 1000077000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                       = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                       = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR                                  = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR                          = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR                                 = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR                                    = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR               = 1000080000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR                   = 1000083000,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR                                          = 1000084000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR                   = 1000085000,
    VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX                                 = 1000086000,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX                     = 1000086001,
    VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX                                = 1000086002,
    VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX                      = 1000086003,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX                         = 1000086004,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX                       = 1000086005,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV             = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT                                   = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT                                       = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT                                        = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT                                       = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT                            = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE                                    = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV               = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT             = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT             = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT    = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT    = 1000101001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT                                             = 1000105000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR                      = 1000111000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR                      = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR                                = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR                                 = 1000113000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR                           = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR                           = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR                              = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR                                     = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR                                        = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR                = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR          = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR                             = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR    = 1000117003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR                           = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR                                   = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR                                         = 1000119002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR                = 1000120000,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK                                  = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK                                = 1000123000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR                            = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR                           = 1000127001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT         = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT                       = 1000130001,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT                                    = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT                  = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT              = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT              = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT                                   = 1000143004,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR                        = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR                         = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR                  = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR                                    = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR                       = 1000146004,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR                            = 1000147000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT        = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT      = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT          = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV              = 1000149000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV            = 1000152000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR                     = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR                            = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR                             = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR                     = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR        = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR         = 1000156005,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR                                  = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR                                   = 1000157001,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT                             = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT               = 1000160001,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT                 = 1000174000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT                          = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT                           = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT          = 1000178002,
}
enum VK_STRUCTURE_TYPE_APPLICATION_INFO                                             = VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO;
enum VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO                                         = VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO                                     = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO                                           = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_SUBMIT_INFO                                                  = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO;
enum VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO                                         = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
enum VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE                                          = VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
enum VK_STRUCTURE_TYPE_BIND_SPARSE_INFO                                             = VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
enum VK_STRUCTURE_TYPE_FENCE_CREATE_INFO                                            = VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO                                        = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_EVENT_CREATE_INFO                                            = VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
enum VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO                                       = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
enum VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO                                           = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
enum VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO                                      = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
enum VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO                                            = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO                                       = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
enum VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO                                    = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO                                   = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO                            = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                      = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO                    = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO                      = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO                          = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO                     = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                       = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                     = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                       = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO                           = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO                                = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO                                 = VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO                                  = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
enum VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO                                          = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
enum VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO                            = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
enum VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO                                  = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
enum VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO                                 = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
enum VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET                                         = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
enum VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET                                          = VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
enum VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO                                      = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
enum VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO                                      = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
enum VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO                                     = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
enum VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO                                 = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
enum VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO                              = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
enum VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO                                    = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
enum VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO                                       = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
enum VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER                                        = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
enum VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER                                         = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
enum VK_STRUCTURE_TYPE_MEMORY_BARRIER                                               = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER;
enum VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO                                  = VkStructureType.VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO                                    = VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO;
enum VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR                                    = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_PRESENT_INFO_KHR                                             = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
enum VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR                                 = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR                              = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR                                     = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
enum VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR                                 = VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR                                  = VkStructureType.VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR                              = VkStructureType.VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR                                  = VkStructureType.VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR                              = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR                                = VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID                                        = VkStructureType.VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID;
enum VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT                        = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD         = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
enum VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT                            = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
enum VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT                             = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
enum VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT                                 = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
enum VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV                    = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
enum VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV                   = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
enum VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV                 = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
enum VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD                     = VkStructureType.VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
enum VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX                        = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX                       = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX                     = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX;
enum VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV                         = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
enum VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV                               = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
enum VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV                           = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV;
enum VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV                           = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV;
enum VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV                    = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR                               = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR                             = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR;
enum VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR                                      = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR;
enum VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR                                = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR                      = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR;
enum VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR                                = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR                      = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR;
enum VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR                         = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR               = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR;
enum VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX                               = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX                      = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX                   = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX                                 = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX                            = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX;
enum VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX                                  = VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX;
enum VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHX                     = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHX;
enum VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHX                      = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX                        = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX;
enum VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX                              = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX;
enum VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX                         = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX                                = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX                       = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX;
enum VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT                                         = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
enum VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN                                    = VkStructureType.VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX                         = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX;
enum VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX                          = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR               = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR                         = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR                     = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR                               = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR                            = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR                       = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR                        = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR                              = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR                          = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR                          = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR                           = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR                             = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR                                    = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
enum VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR                                     = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR                                       = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
enum VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR                   = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR                  = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR                            = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR                             = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                       = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                       = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR                                  = VkStructureType.VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR;
enum VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR                          = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR                                 = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
enum VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR                                    = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR               = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR                   = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR;
enum VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR                                          = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
enum VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR                   = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX                                 = VkStructureType.VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX;
enum VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX                     = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX;
enum VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX                                = VkStructureType.VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX;
enum VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX                      = VkStructureType.VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX;
enum VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX                         = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX;
enum VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX                       = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX;
enum VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV             = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
enum VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT                                   = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
enum VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT                                       = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
enum VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT                                        = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
enum VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT                                       = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
enum VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT                            = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE                                    = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
enum VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV               = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT             = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
enum VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT             = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT    = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
enum VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT    = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_HDR_METADATA_EXT                                             = VkStructureType.VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
enum VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR                      = VkStructureType.VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR                      = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR                                = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR                                 = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR                           = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR                           = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR                              = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR                                     = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
enum VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR                                        = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR                = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR          = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR                             = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR    = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR                           = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
enum VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR                                   = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
enum VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR                                         = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR                = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR;
enum VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK                                  = VkStructureType.VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK;
enum VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK                                = VkStructureType.VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK;
enum VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR                            = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR;
enum VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR                           = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT         = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT;
enum VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT                       = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT                                    = VkStructureType.VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
enum VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT                  = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
enum VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT              = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT              = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
enum VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT                                   = VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
enum VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR                        = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR;
enum VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR                         = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR;
enum VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR                  = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR;
enum VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR                                    = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR;
enum VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR                       = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR;
enum VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR                            = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT        = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT      = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
enum VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT          = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV              = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
enum VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV            = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
enum VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR                     = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR;
enum VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR                            = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR;
enum VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR                             = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR;
enum VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR                     = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR        = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR;
enum VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR         = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR;
enum VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR                                  = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR;
enum VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR                                   = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR;
enum VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT                             = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT               = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT                 = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
enum VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT                          = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
enum VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT                           = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
enum VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT          = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;

enum VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND  = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT   = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE    = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE   = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
}
enum VK_SYSTEM_ALLOCATION_SCOPE_COMMAND  = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND;
enum VK_SYSTEM_ALLOCATION_SCOPE_OBJECT   = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_OBJECT;
enum VK_SYSTEM_ALLOCATION_SCOPE_CACHE    = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_CACHE;
enum VK_SYSTEM_ALLOCATION_SCOPE_DEVICE   = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_DEVICE;
enum VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE;

enum VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
}
enum VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE;

enum VkFormat {
    VK_FORMAT_UNDEFINED                                      = 0,
    VK_FORMAT_R4G4_UNORM_PACK8                               = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16                          = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16                          = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16                            = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16                            = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16                          = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16                          = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16                          = 8,
    VK_FORMAT_R8_UNORM                                       = 9,
    VK_FORMAT_R8_SNORM                                       = 10,
    VK_FORMAT_R8_USCALED                                     = 11,
    VK_FORMAT_R8_SSCALED                                     = 12,
    VK_FORMAT_R8_UINT                                        = 13,
    VK_FORMAT_R8_SINT                                        = 14,
    VK_FORMAT_R8_SRGB                                        = 15,
    VK_FORMAT_R8G8_UNORM                                     = 16,
    VK_FORMAT_R8G8_SNORM                                     = 17,
    VK_FORMAT_R8G8_USCALED                                   = 18,
    VK_FORMAT_R8G8_SSCALED                                   = 19,
    VK_FORMAT_R8G8_UINT                                      = 20,
    VK_FORMAT_R8G8_SINT                                      = 21,
    VK_FORMAT_R8G8_SRGB                                      = 22,
    VK_FORMAT_R8G8B8_UNORM                                   = 23,
    VK_FORMAT_R8G8B8_SNORM                                   = 24,
    VK_FORMAT_R8G8B8_USCALED                                 = 25,
    VK_FORMAT_R8G8B8_SSCALED                                 = 26,
    VK_FORMAT_R8G8B8_UINT                                    = 27,
    VK_FORMAT_R8G8B8_SINT                                    = 28,
    VK_FORMAT_R8G8B8_SRGB                                    = 29,
    VK_FORMAT_B8G8R8_UNORM                                   = 30,
    VK_FORMAT_B8G8R8_SNORM                                   = 31,
    VK_FORMAT_B8G8R8_USCALED                                 = 32,
    VK_FORMAT_B8G8R8_SSCALED                                 = 33,
    VK_FORMAT_B8G8R8_UINT                                    = 34,
    VK_FORMAT_B8G8R8_SINT                                    = 35,
    VK_FORMAT_B8G8R8_SRGB                                    = 36,
    VK_FORMAT_R8G8B8A8_UNORM                                 = 37,
    VK_FORMAT_R8G8B8A8_SNORM                                 = 38,
    VK_FORMAT_R8G8B8A8_USCALED                               = 39,
    VK_FORMAT_R8G8B8A8_SSCALED                               = 40,
    VK_FORMAT_R8G8B8A8_UINT                                  = 41,
    VK_FORMAT_R8G8B8A8_SINT                                  = 42,
    VK_FORMAT_R8G8B8A8_SRGB                                  = 43,
    VK_FORMAT_B8G8R8A8_UNORM                                 = 44,
    VK_FORMAT_B8G8R8A8_SNORM                                 = 45,
    VK_FORMAT_B8G8R8A8_USCALED                               = 46,
    VK_FORMAT_B8G8R8A8_SSCALED                               = 47,
    VK_FORMAT_B8G8R8A8_UINT                                  = 48,
    VK_FORMAT_B8G8R8A8_SINT                                  = 49,
    VK_FORMAT_B8G8R8A8_SRGB                                  = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32                          = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32                          = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32                        = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32                        = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32                           = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32                           = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32                           = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32                       = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32                       = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32                     = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32                     = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32                        = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32                        = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32                       = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32                       = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32                     = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32                     = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32                        = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32                        = 69,
    VK_FORMAT_R16_UNORM                                      = 70,
    VK_FORMAT_R16_SNORM                                      = 71,
    VK_FORMAT_R16_USCALED                                    = 72,
    VK_FORMAT_R16_SSCALED                                    = 73,
    VK_FORMAT_R16_UINT                                       = 74,
    VK_FORMAT_R16_SINT                                       = 75,
    VK_FORMAT_R16_SFLOAT                                     = 76,
    VK_FORMAT_R16G16_UNORM                                   = 77,
    VK_FORMAT_R16G16_SNORM                                   = 78,
    VK_FORMAT_R16G16_USCALED                                 = 79,
    VK_FORMAT_R16G16_SSCALED                                 = 80,
    VK_FORMAT_R16G16_UINT                                    = 81,
    VK_FORMAT_R16G16_SINT                                    = 82,
    VK_FORMAT_R16G16_SFLOAT                                  = 83,
    VK_FORMAT_R16G16B16_UNORM                                = 84,
    VK_FORMAT_R16G16B16_SNORM                                = 85,
    VK_FORMAT_R16G16B16_USCALED                              = 86,
    VK_FORMAT_R16G16B16_SSCALED                              = 87,
    VK_FORMAT_R16G16B16_UINT                                 = 88,
    VK_FORMAT_R16G16B16_SINT                                 = 89,
    VK_FORMAT_R16G16B16_SFLOAT                               = 90,
    VK_FORMAT_R16G16B16A16_UNORM                             = 91,
    VK_FORMAT_R16G16B16A16_SNORM                             = 92,
    VK_FORMAT_R16G16B16A16_USCALED                           = 93,
    VK_FORMAT_R16G16B16A16_SSCALED                           = 94,
    VK_FORMAT_R16G16B16A16_UINT                              = 95,
    VK_FORMAT_R16G16B16A16_SINT                              = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT                            = 97,
    VK_FORMAT_R32_UINT                                       = 98,
    VK_FORMAT_R32_SINT                                       = 99,
    VK_FORMAT_R32_SFLOAT                                     = 100,
    VK_FORMAT_R32G32_UINT                                    = 101,
    VK_FORMAT_R32G32_SINT                                    = 102,
    VK_FORMAT_R32G32_SFLOAT                                  = 103,
    VK_FORMAT_R32G32B32_UINT                                 = 104,
    VK_FORMAT_R32G32B32_SINT                                 = 105,
    VK_FORMAT_R32G32B32_SFLOAT                               = 106,
    VK_FORMAT_R32G32B32A32_UINT                              = 107,
    VK_FORMAT_R32G32B32A32_SINT                              = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT                            = 109,
    VK_FORMAT_R64_UINT                                       = 110,
    VK_FORMAT_R64_SINT                                       = 111,
    VK_FORMAT_R64_SFLOAT                                     = 112,
    VK_FORMAT_R64G64_UINT                                    = 113,
    VK_FORMAT_R64G64_SINT                                    = 114,
    VK_FORMAT_R64G64_SFLOAT                                  = 115,
    VK_FORMAT_R64G64B64_UINT                                 = 116,
    VK_FORMAT_R64G64B64_SINT                                 = 117,
    VK_FORMAT_R64G64B64_SFLOAT                               = 118,
    VK_FORMAT_R64G64B64A64_UINT                              = 119,
    VK_FORMAT_R64G64B64A64_SINT                              = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT                            = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32                        = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                         = 123,
    VK_FORMAT_D16_UNORM                                      = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32                            = 125,
    VK_FORMAT_D32_SFLOAT                                     = 126,
    VK_FORMAT_S8_UINT                                        = 127,
    VK_FORMAT_D16_UNORM_S8_UINT                              = 128,
    VK_FORMAT_D24_UNORM_S8_UINT                              = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT                             = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK                            = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK                             = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK                           = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK                            = 134,
    VK_FORMAT_BC2_UNORM_BLOCK                                = 135,
    VK_FORMAT_BC2_SRGB_BLOCK                                 = 136,
    VK_FORMAT_BC3_UNORM_BLOCK                                = 137,
    VK_FORMAT_BC3_SRGB_BLOCK                                 = 138,
    VK_FORMAT_BC4_UNORM_BLOCK                                = 139,
    VK_FORMAT_BC4_SNORM_BLOCK                                = 140,
    VK_FORMAT_BC5_UNORM_BLOCK                                = 141,
    VK_FORMAT_BC5_SNORM_BLOCK                                = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK                              = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK                              = 144,
    VK_FORMAT_BC7_UNORM_BLOCK                                = 145,
    VK_FORMAT_BC7_SRGB_BLOCK                                 = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                        = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                         = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                      = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                       = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                      = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                       = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK                            = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK                            = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK                         = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK                         = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK                           = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK                            = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK                           = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK                            = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK                           = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK                            = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK                           = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK                            = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK                           = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK                            = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK                           = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK                            = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK                           = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK                            = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK                           = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK                            = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK                          = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK                           = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK                          = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK                           = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK                          = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK                           = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK                         = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK                          = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK                         = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK                          = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK                         = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK                          = 184,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG                    = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG                    = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG                    = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG                    = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG                     = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG                     = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG                     = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG                     = 1000054007,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR                         = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR                         = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR                  = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR                   = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR                  = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR                   = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR                  = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR                         = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR                   = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR         = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR     = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR     = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR  = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR  = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR                         = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR                   = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR         = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR     = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR     = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR  = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR  = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR                     = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR                     = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR               = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR                = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR               = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR                = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR               = 1000156033,
}
enum VK_FORMAT_UNDEFINED                                      = VkFormat.VK_FORMAT_UNDEFINED;
enum VK_FORMAT_R4G4_UNORM_PACK8                               = VkFormat.VK_FORMAT_R4G4_UNORM_PACK8;
enum VK_FORMAT_R4G4B4A4_UNORM_PACK16                          = VkFormat.VK_FORMAT_R4G4B4A4_UNORM_PACK16;
enum VK_FORMAT_B4G4R4A4_UNORM_PACK16                          = VkFormat.VK_FORMAT_B4G4R4A4_UNORM_PACK16;
enum VK_FORMAT_R5G6B5_UNORM_PACK16                            = VkFormat.VK_FORMAT_R5G6B5_UNORM_PACK16;
enum VK_FORMAT_B5G6R5_UNORM_PACK16                            = VkFormat.VK_FORMAT_B5G6R5_UNORM_PACK16;
enum VK_FORMAT_R5G5B5A1_UNORM_PACK16                          = VkFormat.VK_FORMAT_R5G5B5A1_UNORM_PACK16;
enum VK_FORMAT_B5G5R5A1_UNORM_PACK16                          = VkFormat.VK_FORMAT_B5G5R5A1_UNORM_PACK16;
enum VK_FORMAT_A1R5G5B5_UNORM_PACK16                          = VkFormat.VK_FORMAT_A1R5G5B5_UNORM_PACK16;
enum VK_FORMAT_R8_UNORM                                       = VkFormat.VK_FORMAT_R8_UNORM;
enum VK_FORMAT_R8_SNORM                                       = VkFormat.VK_FORMAT_R8_SNORM;
enum VK_FORMAT_R8_USCALED                                     = VkFormat.VK_FORMAT_R8_USCALED;
enum VK_FORMAT_R8_SSCALED                                     = VkFormat.VK_FORMAT_R8_SSCALED;
enum VK_FORMAT_R8_UINT                                        = VkFormat.VK_FORMAT_R8_UINT;
enum VK_FORMAT_R8_SINT                                        = VkFormat.VK_FORMAT_R8_SINT;
enum VK_FORMAT_R8_SRGB                                        = VkFormat.VK_FORMAT_R8_SRGB;
enum VK_FORMAT_R8G8_UNORM                                     = VkFormat.VK_FORMAT_R8G8_UNORM;
enum VK_FORMAT_R8G8_SNORM                                     = VkFormat.VK_FORMAT_R8G8_SNORM;
enum VK_FORMAT_R8G8_USCALED                                   = VkFormat.VK_FORMAT_R8G8_USCALED;
enum VK_FORMAT_R8G8_SSCALED                                   = VkFormat.VK_FORMAT_R8G8_SSCALED;
enum VK_FORMAT_R8G8_UINT                                      = VkFormat.VK_FORMAT_R8G8_UINT;
enum VK_FORMAT_R8G8_SINT                                      = VkFormat.VK_FORMAT_R8G8_SINT;
enum VK_FORMAT_R8G8_SRGB                                      = VkFormat.VK_FORMAT_R8G8_SRGB;
enum VK_FORMAT_R8G8B8_UNORM                                   = VkFormat.VK_FORMAT_R8G8B8_UNORM;
enum VK_FORMAT_R8G8B8_SNORM                                   = VkFormat.VK_FORMAT_R8G8B8_SNORM;
enum VK_FORMAT_R8G8B8_USCALED                                 = VkFormat.VK_FORMAT_R8G8B8_USCALED;
enum VK_FORMAT_R8G8B8_SSCALED                                 = VkFormat.VK_FORMAT_R8G8B8_SSCALED;
enum VK_FORMAT_R8G8B8_UINT                                    = VkFormat.VK_FORMAT_R8G8B8_UINT;
enum VK_FORMAT_R8G8B8_SINT                                    = VkFormat.VK_FORMAT_R8G8B8_SINT;
enum VK_FORMAT_R8G8B8_SRGB                                    = VkFormat.VK_FORMAT_R8G8B8_SRGB;
enum VK_FORMAT_B8G8R8_UNORM                                   = VkFormat.VK_FORMAT_B8G8R8_UNORM;
enum VK_FORMAT_B8G8R8_SNORM                                   = VkFormat.VK_FORMAT_B8G8R8_SNORM;
enum VK_FORMAT_B8G8R8_USCALED                                 = VkFormat.VK_FORMAT_B8G8R8_USCALED;
enum VK_FORMAT_B8G8R8_SSCALED                                 = VkFormat.VK_FORMAT_B8G8R8_SSCALED;
enum VK_FORMAT_B8G8R8_UINT                                    = VkFormat.VK_FORMAT_B8G8R8_UINT;
enum VK_FORMAT_B8G8R8_SINT                                    = VkFormat.VK_FORMAT_B8G8R8_SINT;
enum VK_FORMAT_B8G8R8_SRGB                                    = VkFormat.VK_FORMAT_B8G8R8_SRGB;
enum VK_FORMAT_R8G8B8A8_UNORM                                 = VkFormat.VK_FORMAT_R8G8B8A8_UNORM;
enum VK_FORMAT_R8G8B8A8_SNORM                                 = VkFormat.VK_FORMAT_R8G8B8A8_SNORM;
enum VK_FORMAT_R8G8B8A8_USCALED                               = VkFormat.VK_FORMAT_R8G8B8A8_USCALED;
enum VK_FORMAT_R8G8B8A8_SSCALED                               = VkFormat.VK_FORMAT_R8G8B8A8_SSCALED;
enum VK_FORMAT_R8G8B8A8_UINT                                  = VkFormat.VK_FORMAT_R8G8B8A8_UINT;
enum VK_FORMAT_R8G8B8A8_SINT                                  = VkFormat.VK_FORMAT_R8G8B8A8_SINT;
enum VK_FORMAT_R8G8B8A8_SRGB                                  = VkFormat.VK_FORMAT_R8G8B8A8_SRGB;
enum VK_FORMAT_B8G8R8A8_UNORM                                 = VkFormat.VK_FORMAT_B8G8R8A8_UNORM;
enum VK_FORMAT_B8G8R8A8_SNORM                                 = VkFormat.VK_FORMAT_B8G8R8A8_SNORM;
enum VK_FORMAT_B8G8R8A8_USCALED                               = VkFormat.VK_FORMAT_B8G8R8A8_USCALED;
enum VK_FORMAT_B8G8R8A8_SSCALED                               = VkFormat.VK_FORMAT_B8G8R8A8_SSCALED;
enum VK_FORMAT_B8G8R8A8_UINT                                  = VkFormat.VK_FORMAT_B8G8R8A8_UINT;
enum VK_FORMAT_B8G8R8A8_SINT                                  = VkFormat.VK_FORMAT_B8G8R8A8_SINT;
enum VK_FORMAT_B8G8R8A8_SRGB                                  = VkFormat.VK_FORMAT_B8G8R8A8_SRGB;
enum VK_FORMAT_A8B8G8R8_UNORM_PACK32                          = VkFormat.VK_FORMAT_A8B8G8R8_UNORM_PACK32;
enum VK_FORMAT_A8B8G8R8_SNORM_PACK32                          = VkFormat.VK_FORMAT_A8B8G8R8_SNORM_PACK32;
enum VK_FORMAT_A8B8G8R8_USCALED_PACK32                        = VkFormat.VK_FORMAT_A8B8G8R8_USCALED_PACK32;
enum VK_FORMAT_A8B8G8R8_SSCALED_PACK32                        = VkFormat.VK_FORMAT_A8B8G8R8_SSCALED_PACK32;
enum VK_FORMAT_A8B8G8R8_UINT_PACK32                           = VkFormat.VK_FORMAT_A8B8G8R8_UINT_PACK32;
enum VK_FORMAT_A8B8G8R8_SINT_PACK32                           = VkFormat.VK_FORMAT_A8B8G8R8_SINT_PACK32;
enum VK_FORMAT_A8B8G8R8_SRGB_PACK32                           = VkFormat.VK_FORMAT_A8B8G8R8_SRGB_PACK32;
enum VK_FORMAT_A2R10G10B10_UNORM_PACK32                       = VkFormat.VK_FORMAT_A2R10G10B10_UNORM_PACK32;
enum VK_FORMAT_A2R10G10B10_SNORM_PACK32                       = VkFormat.VK_FORMAT_A2R10G10B10_SNORM_PACK32;
enum VK_FORMAT_A2R10G10B10_USCALED_PACK32                     = VkFormat.VK_FORMAT_A2R10G10B10_USCALED_PACK32;
enum VK_FORMAT_A2R10G10B10_SSCALED_PACK32                     = VkFormat.VK_FORMAT_A2R10G10B10_SSCALED_PACK32;
enum VK_FORMAT_A2R10G10B10_UINT_PACK32                        = VkFormat.VK_FORMAT_A2R10G10B10_UINT_PACK32;
enum VK_FORMAT_A2R10G10B10_SINT_PACK32                        = VkFormat.VK_FORMAT_A2R10G10B10_SINT_PACK32;
enum VK_FORMAT_A2B10G10R10_UNORM_PACK32                       = VkFormat.VK_FORMAT_A2B10G10R10_UNORM_PACK32;
enum VK_FORMAT_A2B10G10R10_SNORM_PACK32                       = VkFormat.VK_FORMAT_A2B10G10R10_SNORM_PACK32;
enum VK_FORMAT_A2B10G10R10_USCALED_PACK32                     = VkFormat.VK_FORMAT_A2B10G10R10_USCALED_PACK32;
enum VK_FORMAT_A2B10G10R10_SSCALED_PACK32                     = VkFormat.VK_FORMAT_A2B10G10R10_SSCALED_PACK32;
enum VK_FORMAT_A2B10G10R10_UINT_PACK32                        = VkFormat.VK_FORMAT_A2B10G10R10_UINT_PACK32;
enum VK_FORMAT_A2B10G10R10_SINT_PACK32                        = VkFormat.VK_FORMAT_A2B10G10R10_SINT_PACK32;
enum VK_FORMAT_R16_UNORM                                      = VkFormat.VK_FORMAT_R16_UNORM;
enum VK_FORMAT_R16_SNORM                                      = VkFormat.VK_FORMAT_R16_SNORM;
enum VK_FORMAT_R16_USCALED                                    = VkFormat.VK_FORMAT_R16_USCALED;
enum VK_FORMAT_R16_SSCALED                                    = VkFormat.VK_FORMAT_R16_SSCALED;
enum VK_FORMAT_R16_UINT                                       = VkFormat.VK_FORMAT_R16_UINT;
enum VK_FORMAT_R16_SINT                                       = VkFormat.VK_FORMAT_R16_SINT;
enum VK_FORMAT_R16_SFLOAT                                     = VkFormat.VK_FORMAT_R16_SFLOAT;
enum VK_FORMAT_R16G16_UNORM                                   = VkFormat.VK_FORMAT_R16G16_UNORM;
enum VK_FORMAT_R16G16_SNORM                                   = VkFormat.VK_FORMAT_R16G16_SNORM;
enum VK_FORMAT_R16G16_USCALED                                 = VkFormat.VK_FORMAT_R16G16_USCALED;
enum VK_FORMAT_R16G16_SSCALED                                 = VkFormat.VK_FORMAT_R16G16_SSCALED;
enum VK_FORMAT_R16G16_UINT                                    = VkFormat.VK_FORMAT_R16G16_UINT;
enum VK_FORMAT_R16G16_SINT                                    = VkFormat.VK_FORMAT_R16G16_SINT;
enum VK_FORMAT_R16G16_SFLOAT                                  = VkFormat.VK_FORMAT_R16G16_SFLOAT;
enum VK_FORMAT_R16G16B16_UNORM                                = VkFormat.VK_FORMAT_R16G16B16_UNORM;
enum VK_FORMAT_R16G16B16_SNORM                                = VkFormat.VK_FORMAT_R16G16B16_SNORM;
enum VK_FORMAT_R16G16B16_USCALED                              = VkFormat.VK_FORMAT_R16G16B16_USCALED;
enum VK_FORMAT_R16G16B16_SSCALED                              = VkFormat.VK_FORMAT_R16G16B16_SSCALED;
enum VK_FORMAT_R16G16B16_UINT                                 = VkFormat.VK_FORMAT_R16G16B16_UINT;
enum VK_FORMAT_R16G16B16_SINT                                 = VkFormat.VK_FORMAT_R16G16B16_SINT;
enum VK_FORMAT_R16G16B16_SFLOAT                               = VkFormat.VK_FORMAT_R16G16B16_SFLOAT;
enum VK_FORMAT_R16G16B16A16_UNORM                             = VkFormat.VK_FORMAT_R16G16B16A16_UNORM;
enum VK_FORMAT_R16G16B16A16_SNORM                             = VkFormat.VK_FORMAT_R16G16B16A16_SNORM;
enum VK_FORMAT_R16G16B16A16_USCALED                           = VkFormat.VK_FORMAT_R16G16B16A16_USCALED;
enum VK_FORMAT_R16G16B16A16_SSCALED                           = VkFormat.VK_FORMAT_R16G16B16A16_SSCALED;
enum VK_FORMAT_R16G16B16A16_UINT                              = VkFormat.VK_FORMAT_R16G16B16A16_UINT;
enum VK_FORMAT_R16G16B16A16_SINT                              = VkFormat.VK_FORMAT_R16G16B16A16_SINT;
enum VK_FORMAT_R16G16B16A16_SFLOAT                            = VkFormat.VK_FORMAT_R16G16B16A16_SFLOAT;
enum VK_FORMAT_R32_UINT                                       = VkFormat.VK_FORMAT_R32_UINT;
enum VK_FORMAT_R32_SINT                                       = VkFormat.VK_FORMAT_R32_SINT;
enum VK_FORMAT_R32_SFLOAT                                     = VkFormat.VK_FORMAT_R32_SFLOAT;
enum VK_FORMAT_R32G32_UINT                                    = VkFormat.VK_FORMAT_R32G32_UINT;
enum VK_FORMAT_R32G32_SINT                                    = VkFormat.VK_FORMAT_R32G32_SINT;
enum VK_FORMAT_R32G32_SFLOAT                                  = VkFormat.VK_FORMAT_R32G32_SFLOAT;
enum VK_FORMAT_R32G32B32_UINT                                 = VkFormat.VK_FORMAT_R32G32B32_UINT;
enum VK_FORMAT_R32G32B32_SINT                                 = VkFormat.VK_FORMAT_R32G32B32_SINT;
enum VK_FORMAT_R32G32B32_SFLOAT                               = VkFormat.VK_FORMAT_R32G32B32_SFLOAT;
enum VK_FORMAT_R32G32B32A32_UINT                              = VkFormat.VK_FORMAT_R32G32B32A32_UINT;
enum VK_FORMAT_R32G32B32A32_SINT                              = VkFormat.VK_FORMAT_R32G32B32A32_SINT;
enum VK_FORMAT_R32G32B32A32_SFLOAT                            = VkFormat.VK_FORMAT_R32G32B32A32_SFLOAT;
enum VK_FORMAT_R64_UINT                                       = VkFormat.VK_FORMAT_R64_UINT;
enum VK_FORMAT_R64_SINT                                       = VkFormat.VK_FORMAT_R64_SINT;
enum VK_FORMAT_R64_SFLOAT                                     = VkFormat.VK_FORMAT_R64_SFLOAT;
enum VK_FORMAT_R64G64_UINT                                    = VkFormat.VK_FORMAT_R64G64_UINT;
enum VK_FORMAT_R64G64_SINT                                    = VkFormat.VK_FORMAT_R64G64_SINT;
enum VK_FORMAT_R64G64_SFLOAT                                  = VkFormat.VK_FORMAT_R64G64_SFLOAT;
enum VK_FORMAT_R64G64B64_UINT                                 = VkFormat.VK_FORMAT_R64G64B64_UINT;
enum VK_FORMAT_R64G64B64_SINT                                 = VkFormat.VK_FORMAT_R64G64B64_SINT;
enum VK_FORMAT_R64G64B64_SFLOAT                               = VkFormat.VK_FORMAT_R64G64B64_SFLOAT;
enum VK_FORMAT_R64G64B64A64_UINT                              = VkFormat.VK_FORMAT_R64G64B64A64_UINT;
enum VK_FORMAT_R64G64B64A64_SINT                              = VkFormat.VK_FORMAT_R64G64B64A64_SINT;
enum VK_FORMAT_R64G64B64A64_SFLOAT                            = VkFormat.VK_FORMAT_R64G64B64A64_SFLOAT;
enum VK_FORMAT_B10G11R11_UFLOAT_PACK32                        = VkFormat.VK_FORMAT_B10G11R11_UFLOAT_PACK32;
enum VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                         = VkFormat.VK_FORMAT_E5B9G9R9_UFLOAT_PACK32;
enum VK_FORMAT_D16_UNORM                                      = VkFormat.VK_FORMAT_D16_UNORM;
enum VK_FORMAT_X8_D24_UNORM_PACK32                            = VkFormat.VK_FORMAT_X8_D24_UNORM_PACK32;
enum VK_FORMAT_D32_SFLOAT                                     = VkFormat.VK_FORMAT_D32_SFLOAT;
enum VK_FORMAT_S8_UINT                                        = VkFormat.VK_FORMAT_S8_UINT;
enum VK_FORMAT_D16_UNORM_S8_UINT                              = VkFormat.VK_FORMAT_D16_UNORM_S8_UINT;
enum VK_FORMAT_D24_UNORM_S8_UINT                              = VkFormat.VK_FORMAT_D24_UNORM_S8_UINT;
enum VK_FORMAT_D32_SFLOAT_S8_UINT                             = VkFormat.VK_FORMAT_D32_SFLOAT_S8_UINT;
enum VK_FORMAT_BC1_RGB_UNORM_BLOCK                            = VkFormat.VK_FORMAT_BC1_RGB_UNORM_BLOCK;
enum VK_FORMAT_BC1_RGB_SRGB_BLOCK                             = VkFormat.VK_FORMAT_BC1_RGB_SRGB_BLOCK;
enum VK_FORMAT_BC1_RGBA_UNORM_BLOCK                           = VkFormat.VK_FORMAT_BC1_RGBA_UNORM_BLOCK;
enum VK_FORMAT_BC1_RGBA_SRGB_BLOCK                            = VkFormat.VK_FORMAT_BC1_RGBA_SRGB_BLOCK;
enum VK_FORMAT_BC2_UNORM_BLOCK                                = VkFormat.VK_FORMAT_BC2_UNORM_BLOCK;
enum VK_FORMAT_BC2_SRGB_BLOCK                                 = VkFormat.VK_FORMAT_BC2_SRGB_BLOCK;
enum VK_FORMAT_BC3_UNORM_BLOCK                                = VkFormat.VK_FORMAT_BC3_UNORM_BLOCK;
enum VK_FORMAT_BC3_SRGB_BLOCK                                 = VkFormat.VK_FORMAT_BC3_SRGB_BLOCK;
enum VK_FORMAT_BC4_UNORM_BLOCK                                = VkFormat.VK_FORMAT_BC4_UNORM_BLOCK;
enum VK_FORMAT_BC4_SNORM_BLOCK                                = VkFormat.VK_FORMAT_BC4_SNORM_BLOCK;
enum VK_FORMAT_BC5_UNORM_BLOCK                                = VkFormat.VK_FORMAT_BC5_UNORM_BLOCK;
enum VK_FORMAT_BC5_SNORM_BLOCK                                = VkFormat.VK_FORMAT_BC5_SNORM_BLOCK;
enum VK_FORMAT_BC6H_UFLOAT_BLOCK                              = VkFormat.VK_FORMAT_BC6H_UFLOAT_BLOCK;
enum VK_FORMAT_BC6H_SFLOAT_BLOCK                              = VkFormat.VK_FORMAT_BC6H_SFLOAT_BLOCK;
enum VK_FORMAT_BC7_UNORM_BLOCK                                = VkFormat.VK_FORMAT_BC7_UNORM_BLOCK;
enum VK_FORMAT_BC7_SRGB_BLOCK                                 = VkFormat.VK_FORMAT_BC7_SRGB_BLOCK;
enum VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                        = VkFormat.VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
enum VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                         = VkFormat.VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
enum VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                      = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
enum VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                       = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
enum VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                      = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
enum VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                       = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
enum VK_FORMAT_EAC_R11_UNORM_BLOCK                            = VkFormat.VK_FORMAT_EAC_R11_UNORM_BLOCK;
enum VK_FORMAT_EAC_R11_SNORM_BLOCK                            = VkFormat.VK_FORMAT_EAC_R11_SNORM_BLOCK;
enum VK_FORMAT_EAC_R11G11_UNORM_BLOCK                         = VkFormat.VK_FORMAT_EAC_R11G11_UNORM_BLOCK;
enum VK_FORMAT_EAC_R11G11_SNORM_BLOCK                         = VkFormat.VK_FORMAT_EAC_R11G11_SNORM_BLOCK;
enum VK_FORMAT_ASTC_4x4_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_4x4_UNORM_BLOCK;
enum VK_FORMAT_ASTC_4x4_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_4x4_SRGB_BLOCK;
enum VK_FORMAT_ASTC_5x4_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_5x4_UNORM_BLOCK;
enum VK_FORMAT_ASTC_5x4_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_5x4_SRGB_BLOCK;
enum VK_FORMAT_ASTC_5x5_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_5x5_UNORM_BLOCK;
enum VK_FORMAT_ASTC_5x5_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_5x5_SRGB_BLOCK;
enum VK_FORMAT_ASTC_6x5_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_6x5_UNORM_BLOCK;
enum VK_FORMAT_ASTC_6x5_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_6x5_SRGB_BLOCK;
enum VK_FORMAT_ASTC_6x6_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_6x6_UNORM_BLOCK;
enum VK_FORMAT_ASTC_6x6_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_6x6_SRGB_BLOCK;
enum VK_FORMAT_ASTC_8x5_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_8x5_UNORM_BLOCK;
enum VK_FORMAT_ASTC_8x5_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_8x5_SRGB_BLOCK;
enum VK_FORMAT_ASTC_8x6_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_8x6_UNORM_BLOCK;
enum VK_FORMAT_ASTC_8x6_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_8x6_SRGB_BLOCK;
enum VK_FORMAT_ASTC_8x8_UNORM_BLOCK                           = VkFormat.VK_FORMAT_ASTC_8x8_UNORM_BLOCK;
enum VK_FORMAT_ASTC_8x8_SRGB_BLOCK                            = VkFormat.VK_FORMAT_ASTC_8x8_SRGB_BLOCK;
enum VK_FORMAT_ASTC_10x5_UNORM_BLOCK                          = VkFormat.VK_FORMAT_ASTC_10x5_UNORM_BLOCK;
enum VK_FORMAT_ASTC_10x5_SRGB_BLOCK                           = VkFormat.VK_FORMAT_ASTC_10x5_SRGB_BLOCK;
enum VK_FORMAT_ASTC_10x6_UNORM_BLOCK                          = VkFormat.VK_FORMAT_ASTC_10x6_UNORM_BLOCK;
enum VK_FORMAT_ASTC_10x6_SRGB_BLOCK                           = VkFormat.VK_FORMAT_ASTC_10x6_SRGB_BLOCK;
enum VK_FORMAT_ASTC_10x8_UNORM_BLOCK                          = VkFormat.VK_FORMAT_ASTC_10x8_UNORM_BLOCK;
enum VK_FORMAT_ASTC_10x8_SRGB_BLOCK                           = VkFormat.VK_FORMAT_ASTC_10x8_SRGB_BLOCK;
enum VK_FORMAT_ASTC_10x10_UNORM_BLOCK                         = VkFormat.VK_FORMAT_ASTC_10x10_UNORM_BLOCK;
enum VK_FORMAT_ASTC_10x10_SRGB_BLOCK                          = VkFormat.VK_FORMAT_ASTC_10x10_SRGB_BLOCK;
enum VK_FORMAT_ASTC_12x10_UNORM_BLOCK                         = VkFormat.VK_FORMAT_ASTC_12x10_UNORM_BLOCK;
enum VK_FORMAT_ASTC_12x10_SRGB_BLOCK                          = VkFormat.VK_FORMAT_ASTC_12x10_SRGB_BLOCK;
enum VK_FORMAT_ASTC_12x12_UNORM_BLOCK                         = VkFormat.VK_FORMAT_ASTC_12x12_UNORM_BLOCK;
enum VK_FORMAT_ASTC_12x12_SRGB_BLOCK                          = VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK;
enum VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG                    = VkFormat.VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG;
enum VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG                    = VkFormat.VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG;
enum VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG                    = VkFormat.VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG;
enum VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG                    = VkFormat.VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG;
enum VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG                     = VkFormat.VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG;
enum VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG                     = VkFormat.VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG;
enum VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG                     = VkFormat.VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG;
enum VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG                     = VkFormat.VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG;
enum VK_FORMAT_G8B8G8R8_422_UNORM_KHR                         = VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM_KHR;
enum VK_FORMAT_B8G8R8G8_422_UNORM_KHR                         = VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM_KHR;
enum VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR                  = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR;
enum VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR                   = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR;
enum VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR                  = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR;
enum VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR                   = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR;
enum VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR                  = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR;
enum VK_FORMAT_R10X6_UNORM_PACK16_KHR                         = VkFormat.VK_FORMAT_R10X6_UNORM_PACK16_KHR;
enum VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR                   = VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR;
enum VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR         = VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR;
enum VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR     = VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR;
enum VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR     = VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR;
enum VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR;
enum VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR  = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR;
enum VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR;
enum VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR  = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR;
enum VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR;
enum VK_FORMAT_R12X4_UNORM_PACK16_KHR                         = VkFormat.VK_FORMAT_R12X4_UNORM_PACK16_KHR;
enum VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR                   = VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR;
enum VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR         = VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR;
enum VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR     = VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR;
enum VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR     = VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR;
enum VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR;
enum VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR  = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR;
enum VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR;
enum VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR  = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR;
enum VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR;
enum VK_FORMAT_G16B16G16R16_422_UNORM_KHR                     = VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM_KHR;
enum VK_FORMAT_B16G16R16G16_422_UNORM_KHR                     = VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM_KHR;
enum VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR               = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR;
enum VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR                = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR;
enum VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR               = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR;
enum VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR                = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR;
enum VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR               = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR;

enum VkFormatFeatureFlagBits : VkFlags {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT                                                               = 0x00000001,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT                                                               = 0x00000002,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT                                                        = 0x00000004,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT                                                        = 0x00000008,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT                                                        = 0x00000010,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT                                                 = 0x00000020,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT                                                               = 0x00000040,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT                                                            = 0x00000080,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT                                                      = 0x00000100,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT                                                    = 0x00000200,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT                                                                    = 0x00000400,
    VK_FORMAT_FEATURE_BLIT_DST_BIT                                                                    = 0x00000800,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT                                                 = 0x00001000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG                                              = 0x00002000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR                                                            = 0x00004000,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR                                                            = 0x00008000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT                                             = 0x00010000,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR                                                 = 0x00020000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR                            = 0x00040000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR           = 0x00080000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR           = 0x00100000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 0x00200000,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR                                                                = 0x00400000,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR                                                  = 0x00800000,
}
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT                                                               = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT;
enum VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT                                                               = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT;
enum VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT                                                        = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT;
enum VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT                                                        = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT;
enum VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT                                                        = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT;
enum VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT                                                 = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT;
enum VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT                                                               = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT;
enum VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT                                                            = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT;
enum VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT                                                      = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT;
enum VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT                                                    = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT;
enum VK_FORMAT_FEATURE_BLIT_SRC_BIT                                                                    = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_SRC_BIT;
enum VK_FORMAT_FEATURE_BLIT_DST_BIT                                                                    = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_DST_BIT;
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT                                                 = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT;
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG                                              = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG;
enum VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR                                                            = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR;
enum VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR                                                            = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR;
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT                                             = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT;
enum VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR                                                 = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR;
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR                            = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR;
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR           = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR;
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR           = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR;
enum VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR;
enum VK_FORMAT_FEATURE_DISJOINT_BIT_KHR                                                                = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT_KHR;
enum VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR                                                  = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR;

enum VkImageType {
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
}
enum VK_IMAGE_TYPE_1D = VkImageType.VK_IMAGE_TYPE_1D;
enum VK_IMAGE_TYPE_2D = VkImageType.VK_IMAGE_TYPE_2D;
enum VK_IMAGE_TYPE_3D = VkImageType.VK_IMAGE_TYPE_3D;

enum VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR  = 1,
}
enum VK_IMAGE_TILING_OPTIMAL = VkImageTiling.VK_IMAGE_TILING_OPTIMAL;
enum VK_IMAGE_TILING_LINEAR  = VkImageTiling.VK_IMAGE_TILING_LINEAR;

enum VkImageUsageFlagBits : VkFlags {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT             = 0x00000001,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT             = 0x00000002,
    VK_IMAGE_USAGE_SAMPLED_BIT                  = 0x00000004,
    VK_IMAGE_USAGE_STORAGE_BIT                  = 0x00000008,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT         = 0x00000010,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT     = 0x00000040,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT         = 0x00000080,
}
enum VK_IMAGE_USAGE_TRANSFER_SRC_BIT             = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_SRC_BIT;
enum VK_IMAGE_USAGE_TRANSFER_DST_BIT             = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_DST_BIT;
enum VK_IMAGE_USAGE_SAMPLED_BIT                  = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLED_BIT;
enum VK_IMAGE_USAGE_STORAGE_BIT                  = VkImageUsageFlagBits.VK_IMAGE_USAGE_STORAGE_BIT;
enum VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT         = VkImageUsageFlagBits.VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
enum VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;
enum VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT     = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT;
enum VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT         = VkImageUsageFlagBits.VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT;

enum VkImageCreateFlagBits : VkFlags {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT                        = 0x00000001,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT                      = 0x00000002,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT                        = 0x00000004,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT                        = 0x00000008,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT                       = 0x00000010,
    VK_IMAGE_CREATE_BIND_SFR_BIT_KHX                          = 0x00000040,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR               = 0x00000020,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR       = 0x00000080,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR                    = 0x00000100,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR                          = 0x00000200,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR                             = 0x00000400,
}
enum VK_IMAGE_CREATE_SPARSE_BINDING_BIT                        = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_BINDING_BIT;
enum VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT                      = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT;
enum VK_IMAGE_CREATE_SPARSE_ALIASED_BIT                        = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_ALIASED_BIT;
enum VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT                        = VkImageCreateFlagBits.VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT;
enum VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT                       = VkImageCreateFlagBits.VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT;
enum VK_IMAGE_CREATE_BIND_SFR_BIT_KHX                          = VkImageCreateFlagBits.VK_IMAGE_CREATE_BIND_SFR_BIT_KHX;
enum VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR               = VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR;
enum VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR       = VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR;
enum VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR                    = VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR;
enum VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT;
enum VK_IMAGE_CREATE_DISJOINT_BIT_KHR                          = VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT_KHR;
enum VK_IMAGE_CREATE_ALIAS_BIT_KHR                             = VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT_KHR;

enum VkSampleCountFlagBits : VkFlags {
    VK_SAMPLE_COUNT_1_BIT  = 0x00000001,
    VK_SAMPLE_COUNT_2_BIT  = 0x00000002,
    VK_SAMPLE_COUNT_4_BIT  = 0x00000004,
    VK_SAMPLE_COUNT_8_BIT  = 0x00000008,
    VK_SAMPLE_COUNT_16_BIT = 0x00000010,
    VK_SAMPLE_COUNT_32_BIT = 0x00000020,
    VK_SAMPLE_COUNT_64_BIT = 0x00000040,
}
enum VK_SAMPLE_COUNT_1_BIT  = VkSampleCountFlagBits.VK_SAMPLE_COUNT_1_BIT;
enum VK_SAMPLE_COUNT_2_BIT  = VkSampleCountFlagBits.VK_SAMPLE_COUNT_2_BIT;
enum VK_SAMPLE_COUNT_4_BIT  = VkSampleCountFlagBits.VK_SAMPLE_COUNT_4_BIT;
enum VK_SAMPLE_COUNT_8_BIT  = VkSampleCountFlagBits.VK_SAMPLE_COUNT_8_BIT;
enum VK_SAMPLE_COUNT_16_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_16_BIT;
enum VK_SAMPLE_COUNT_32_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_32_BIT;
enum VK_SAMPLE_COUNT_64_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_64_BIT;

enum VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER          = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU            = 4,
}
enum VK_PHYSICAL_DEVICE_TYPE_OTHER          = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER;
enum VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU;
enum VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU;
enum VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU;
enum VK_PHYSICAL_DEVICE_TYPE_CPU            = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU;

enum VkQueueFlagBits : VkFlags {
    VK_QUEUE_GRAPHICS_BIT       = 0x00000001,
    VK_QUEUE_COMPUTE_BIT        = 0x00000002,
    VK_QUEUE_TRANSFER_BIT       = 0x00000004,
    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
}
enum VK_QUEUE_GRAPHICS_BIT       = VkQueueFlagBits.VK_QUEUE_GRAPHICS_BIT;
enum VK_QUEUE_COMPUTE_BIT        = VkQueueFlagBits.VK_QUEUE_COMPUTE_BIT;
enum VK_QUEUE_TRANSFER_BIT       = VkQueueFlagBits.VK_QUEUE_TRANSFER_BIT;
enum VK_QUEUE_SPARSE_BINDING_BIT = VkQueueFlagBits.VK_QUEUE_SPARSE_BINDING_BIT;

enum VkMemoryPropertyFlagBits : VkFlags {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT     = 0x00000001,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT     = 0x00000002,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT    = 0x00000004,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT      = 0x00000008,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
}
enum VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT     = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;
enum VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT     = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;
enum VK_MEMORY_PROPERTY_HOST_COHERENT_BIT    = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;
enum VK_MEMORY_PROPERTY_HOST_CACHED_BIT      = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_CACHED_BIT;
enum VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT;

enum VkMemoryHeapFlagBits : VkFlags {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT       = 0x00000001,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHX = 0x00000002,
}
enum VK_MEMORY_HEAP_DEVICE_LOCAL_BIT       = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_DEVICE_LOCAL_BIT;
enum VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHX = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHX;

enum VkPipelineStageFlagBits : VkFlags {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT                    = 0x00000001,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT                  = 0x00000002,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT                   = 0x00000004,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT                  = 0x00000008,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT    = 0x00000010,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT                = 0x00000040,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT                = 0x00000080,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT           = 0x00000100,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT            = 0x00000200,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT        = 0x00000400,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT                 = 0x00000800,
    VK_PIPELINE_STAGE_TRANSFER_BIT                       = 0x00001000,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT                 = 0x00002000,
    VK_PIPELINE_STAGE_HOST_BIT                           = 0x00004000,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT                   = 0x00008000,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT                   = 0x00010000,
    VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX            = 0x00020000,
}
enum VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT                    = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
enum VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT                  = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;
enum VK_PIPELINE_STAGE_VERTEX_INPUT_BIT                   = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
enum VK_PIPELINE_STAGE_VERTEX_SHADER_BIT                  = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_SHADER_BIT;
enum VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT    = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT;
enum VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT;
enum VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT                = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT;
enum VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT                = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
enum VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT           = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
enum VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT            = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
enum VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT        = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
enum VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT                 = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
enum VK_PIPELINE_STAGE_TRANSFER_BIT                       = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFER_BIT;
enum VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT                 = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
enum VK_PIPELINE_STAGE_HOST_BIT                           = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_HOST_BIT;
enum VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT                   = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT;
enum VK_PIPELINE_STAGE_ALL_COMMANDS_BIT                   = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_COMMANDS_BIT;
enum VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX            = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX;

enum VkImageAspectFlagBits : VkFlags {
    VK_IMAGE_ASPECT_COLOR_BIT       = 0x00000001,
    VK_IMAGE_ASPECT_DEPTH_BIT       = 0x00000002,
    VK_IMAGE_ASPECT_STENCIL_BIT     = 0x00000004,
    VK_IMAGE_ASPECT_METADATA_BIT    = 0x00000008,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 0x00000010,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 0x00000020,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 0x00000040,
}
enum VK_IMAGE_ASPECT_COLOR_BIT       = VkImageAspectFlagBits.VK_IMAGE_ASPECT_COLOR_BIT;
enum VK_IMAGE_ASPECT_DEPTH_BIT       = VkImageAspectFlagBits.VK_IMAGE_ASPECT_DEPTH_BIT;
enum VK_IMAGE_ASPECT_STENCIL_BIT     = VkImageAspectFlagBits.VK_IMAGE_ASPECT_STENCIL_BIT;
enum VK_IMAGE_ASPECT_METADATA_BIT    = VkImageAspectFlagBits.VK_IMAGE_ASPECT_METADATA_BIT;
enum VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT_KHR;
enum VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT_KHR;
enum VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT_KHR;

enum VkSparseImageFormatFlagBits : VkFlags {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT         = 0x00000001,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT       = 0x00000002,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
}
enum VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT         = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT;
enum VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT       = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT;
enum VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT;

enum VkSparseMemoryBindFlagBits : VkFlags {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,
}
enum VK_SPARSE_MEMORY_BIND_METADATA_BIT = VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_METADATA_BIT;

enum VkFenceCreateFlagBits : VkFlags {
    VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,
}
enum VK_FENCE_CREATE_SIGNALED_BIT = VkFenceCreateFlagBits.VK_FENCE_CREATE_SIGNALED_BIT;

enum VkQueryType {
    VK_QUERY_TYPE_OCCLUSION           = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP           = 2,
}
enum VK_QUERY_TYPE_OCCLUSION           = VkQueryType.VK_QUERY_TYPE_OCCLUSION;
enum VK_QUERY_TYPE_PIPELINE_STATISTICS = VkQueryType.VK_QUERY_TYPE_PIPELINE_STATISTICS;
enum VK_QUERY_TYPE_TIMESTAMP           = VkQueryType.VK_QUERY_TYPE_TIMESTAMP;

enum VkQueryPipelineStatisticFlagBits : VkFlags {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT                    = 0x00000001,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT                  = 0x00000002,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT                  = 0x00000004,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT                = 0x00000008,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT                 = 0x00000010,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT                       = 0x00000020,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT                        = 0x00000040,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT                = 0x00000080,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT        = 0x00000100,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT                 = 0x00000400,
}
enum VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT                    = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT                  = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT                  = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT                = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT                 = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT                       = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT                        = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT                = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT        = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT;
enum VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT                 = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT;

enum VkQueryResultFlagBits : VkFlags {
    VK_QUERY_RESULT_64_BIT                = 0x00000001,
    VK_QUERY_RESULT_WAIT_BIT              = 0x00000002,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
    VK_QUERY_RESULT_PARTIAL_BIT           = 0x00000008,
}
enum VK_QUERY_RESULT_64_BIT                = VkQueryResultFlagBits.VK_QUERY_RESULT_64_BIT;
enum VK_QUERY_RESULT_WAIT_BIT              = VkQueryResultFlagBits.VK_QUERY_RESULT_WAIT_BIT;
enum VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_AVAILABILITY_BIT;
enum VK_QUERY_RESULT_PARTIAL_BIT           = VkQueryResultFlagBits.VK_QUERY_RESULT_PARTIAL_BIT;

enum VkBufferCreateFlagBits : VkFlags {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT   = 0x00000001,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT   = 0x00000004,
}
enum VK_BUFFER_CREATE_SPARSE_BINDING_BIT   = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_BINDING_BIT;
enum VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT;
enum VK_BUFFER_CREATE_SPARSE_ALIASED_BIT   = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_ALIASED_BIT;

enum VkBufferUsageFlagBits : VkFlags {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT         = 0x00000001,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT         = 0x00000002,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT       = 0x00000010,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT       = 0x00000020,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT         = 0x00000040,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT        = 0x00000080,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT      = 0x00000100,
}
enum VK_BUFFER_USAGE_TRANSFER_SRC_BIT         = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
enum VK_BUFFER_USAGE_TRANSFER_DST_BIT         = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_DST_BIT;
enum VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT;
enum VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT;
enum VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT       = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT;
enum VK_BUFFER_USAGE_STORAGE_BUFFER_BIT       = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT;
enum VK_BUFFER_USAGE_INDEX_BUFFER_BIT         = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDEX_BUFFER_BIT;
enum VK_BUFFER_USAGE_VERTEX_BUFFER_BIT        = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT;
enum VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT      = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT;

enum VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE  = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
}
enum VK_SHARING_MODE_EXCLUSIVE  = VkSharingMode.VK_SHARING_MODE_EXCLUSIVE;
enum VK_SHARING_MODE_CONCURRENT = VkSharingMode.VK_SHARING_MODE_CONCURRENT;

enum VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED                                      = 0,
    VK_IMAGE_LAYOUT_GENERAL                                        = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL                       = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL               = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL                = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL                       = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL                           = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL                           = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED                                 = 8,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR                                = 1000001002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR                             = 1000111000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001,
}
enum VK_IMAGE_LAYOUT_UNDEFINED                                      = VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED;
enum VK_IMAGE_LAYOUT_GENERAL                                        = VkImageLayout.VK_IMAGE_LAYOUT_GENERAL;
enum VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL                       = VkImageLayout.VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
enum VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL               = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
enum VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL                = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
enum VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL                       = VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
enum VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL                           = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
enum VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL                           = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
enum VK_IMAGE_LAYOUT_PREINITIALIZED                                 = VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED;
enum VK_IMAGE_LAYOUT_PRESENT_SRC_KHR                                = VkImageLayout.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
enum VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR                             = VkImageLayout.VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;
enum VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR;
enum VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR;

enum VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D         = 0,
    VK_IMAGE_VIEW_TYPE_2D         = 1,
    VK_IMAGE_VIEW_TYPE_3D         = 2,
    VK_IMAGE_VIEW_TYPE_CUBE       = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY   = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY   = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
}
enum VK_IMAGE_VIEW_TYPE_1D         = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D;
enum VK_IMAGE_VIEW_TYPE_2D         = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D;
enum VK_IMAGE_VIEW_TYPE_3D         = VkImageViewType.VK_IMAGE_VIEW_TYPE_3D;
enum VK_IMAGE_VIEW_TYPE_CUBE       = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE;
enum VK_IMAGE_VIEW_TYPE_1D_ARRAY   = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D_ARRAY;
enum VK_IMAGE_VIEW_TYPE_2D_ARRAY   = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D_ARRAY;
enum VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY;

enum VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO     = 1,
    VK_COMPONENT_SWIZZLE_ONE      = 2,
    VK_COMPONENT_SWIZZLE_R        = 3,
    VK_COMPONENT_SWIZZLE_G        = 4,
    VK_COMPONENT_SWIZZLE_B        = 5,
    VK_COMPONENT_SWIZZLE_A        = 6,
}
enum VK_COMPONENT_SWIZZLE_IDENTITY = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY;
enum VK_COMPONENT_SWIZZLE_ZERO     = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ZERO;
enum VK_COMPONENT_SWIZZLE_ONE      = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ONE;
enum VK_COMPONENT_SWIZZLE_R        = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_R;
enum VK_COMPONENT_SWIZZLE_G        = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_G;
enum VK_COMPONENT_SWIZZLE_B        = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_B;
enum VK_COMPONENT_SWIZZLE_A        = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A;

enum VkPipelineCreateFlagBits : VkFlags {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT             = 0x00000001,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT                = 0x00000002,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT                       = 0x00000004,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX = 0x00000008,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHX                    = 0x00000010,
}
enum VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT             = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT;
enum VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT                = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT;
enum VK_PIPELINE_CREATE_DERIVATIVE_BIT                       = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT;
enum VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX;
enum VK_PIPELINE_CREATE_DISPATCH_BASE_KHX                    = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_KHX;

enum VkShaderStageFlagBits : VkFlags {
    VK_SHADER_STAGE_VERTEX_BIT                  = 0x00000001,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT    = 0x00000002,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    VK_SHADER_STAGE_GEOMETRY_BIT                = 0x00000008,
    VK_SHADER_STAGE_FRAGMENT_BIT                = 0x00000010,
    VK_SHADER_STAGE_COMPUTE_BIT                 = 0x00000020,
    VK_SHADER_STAGE_ALL_GRAPHICS                = 0x0000001F,
    VK_SHADER_STAGE_ALL                         = 0x7FFFFFFF,
}
enum VK_SHADER_STAGE_VERTEX_BIT                  = VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT;
enum VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT    = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT;
enum VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT;
enum VK_SHADER_STAGE_GEOMETRY_BIT                = VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT;
enum VK_SHADER_STAGE_FRAGMENT_BIT                = VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT;
enum VK_SHADER_STAGE_COMPUTE_BIT                 = VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT;
enum VK_SHADER_STAGE_ALL_GRAPHICS                = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS;
enum VK_SHADER_STAGE_ALL                         = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL;

enum VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX   = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
}
enum VK_VERTEX_INPUT_RATE_VERTEX   = VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX;
enum VK_VERTEX_INPUT_RATE_INSTANCE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE;

enum VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST                    = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST                     = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP                    = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST                 = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP                = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN                  = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY      = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY     = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY  = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST                    = 10,
}
enum VK_PRIMITIVE_TOPOLOGY_POINT_LIST                    = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST;
enum VK_PRIMITIVE_TOPOLOGY_LINE_LIST                     = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST;
enum VK_PRIMITIVE_TOPOLOGY_LINE_STRIP                    = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP;
enum VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST                 = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
enum VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP                = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP;
enum VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN                  = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN;
enum VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY      = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY;
enum VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY     = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY;
enum VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY  = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY;
enum VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY;
enum VK_PRIMITIVE_TOPOLOGY_PATCH_LIST                    = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST;

enum VkPolygonMode {
    VK_POLYGON_MODE_FILL              = 0,
    VK_POLYGON_MODE_LINE              = 1,
    VK_POLYGON_MODE_POINT             = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
}
enum VK_POLYGON_MODE_FILL              = VkPolygonMode.VK_POLYGON_MODE_FILL;
enum VK_POLYGON_MODE_LINE              = VkPolygonMode.VK_POLYGON_MODE_LINE;
enum VK_POLYGON_MODE_POINT             = VkPolygonMode.VK_POLYGON_MODE_POINT;
enum VK_POLYGON_MODE_FILL_RECTANGLE_NV = VkPolygonMode.VK_POLYGON_MODE_FILL_RECTANGLE_NV;

enum VkCullModeFlagBits : VkFlags {
    VK_CULL_MODE_NONE           = 0,
    VK_CULL_MODE_FRONT_BIT      = 0x00000001,
    VK_CULL_MODE_BACK_BIT       = 0x00000002,
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
}
enum VK_CULL_MODE_NONE           = VkCullModeFlagBits.VK_CULL_MODE_NONE;
enum VK_CULL_MODE_FRONT_BIT      = VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT;
enum VK_CULL_MODE_BACK_BIT       = VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT;
enum VK_CULL_MODE_FRONT_AND_BACK = VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK;

enum VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE         = 1,
}
enum VK_FRONT_FACE_COUNTER_CLOCKWISE = VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE;
enum VK_FRONT_FACE_CLOCKWISE         = VkFrontFace.VK_FRONT_FACE_CLOCKWISE;

enum VkCompareOp {
    VK_COMPARE_OP_NEVER            = 0,
    VK_COMPARE_OP_LESS             = 1,
    VK_COMPARE_OP_EQUAL            = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL    = 3,
    VK_COMPARE_OP_GREATER          = 4,
    VK_COMPARE_OP_NOT_EQUAL        = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS           = 7,
}
enum VK_COMPARE_OP_NEVER            = VkCompareOp.VK_COMPARE_OP_NEVER;
enum VK_COMPARE_OP_LESS             = VkCompareOp.VK_COMPARE_OP_LESS;
enum VK_COMPARE_OP_EQUAL            = VkCompareOp.VK_COMPARE_OP_EQUAL;
enum VK_COMPARE_OP_LESS_OR_EQUAL    = VkCompareOp.VK_COMPARE_OP_LESS_OR_EQUAL;
enum VK_COMPARE_OP_GREATER          = VkCompareOp.VK_COMPARE_OP_GREATER;
enum VK_COMPARE_OP_NOT_EQUAL        = VkCompareOp.VK_COMPARE_OP_NOT_EQUAL;
enum VK_COMPARE_OP_GREATER_OR_EQUAL = VkCompareOp.VK_COMPARE_OP_GREATER_OR_EQUAL;
enum VK_COMPARE_OP_ALWAYS           = VkCompareOp.VK_COMPARE_OP_ALWAYS;

enum VkStencilOp {
    VK_STENCIL_OP_KEEP                = 0,
    VK_STENCIL_OP_ZERO                = 1,
    VK_STENCIL_OP_REPLACE             = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT              = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP  = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP  = 7,
}
enum VK_STENCIL_OP_KEEP                = VkStencilOp.VK_STENCIL_OP_KEEP;
enum VK_STENCIL_OP_ZERO                = VkStencilOp.VK_STENCIL_OP_ZERO;
enum VK_STENCIL_OP_REPLACE             = VkStencilOp.VK_STENCIL_OP_REPLACE;
enum VK_STENCIL_OP_INCREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_CLAMP;
enum VK_STENCIL_OP_DECREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_CLAMP;
enum VK_STENCIL_OP_INVERT              = VkStencilOp.VK_STENCIL_OP_INVERT;
enum VK_STENCIL_OP_INCREMENT_AND_WRAP  = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_WRAP;
enum VK_STENCIL_OP_DECREMENT_AND_WRAP  = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP;

enum VkLogicOp {
    VK_LOGIC_OP_CLEAR         = 0,
    VK_LOGIC_OP_AND           = 1,
    VK_LOGIC_OP_AND_REVERSE   = 2,
    VK_LOGIC_OP_COPY          = 3,
    VK_LOGIC_OP_AND_INVERTED  = 4,
    VK_LOGIC_OP_NO_OP         = 5,
    VK_LOGIC_OP_XOR           = 6,
    VK_LOGIC_OP_OR            = 7,
    VK_LOGIC_OP_NOR           = 8,
    VK_LOGIC_OP_EQUIVALENT    = 9,
    VK_LOGIC_OP_INVERT        = 10,
    VK_LOGIC_OP_OR_REVERSE    = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED   = 13,
    VK_LOGIC_OP_NAND          = 14,
    VK_LOGIC_OP_SET           = 15,
}
enum VK_LOGIC_OP_CLEAR         = VkLogicOp.VK_LOGIC_OP_CLEAR;
enum VK_LOGIC_OP_AND           = VkLogicOp.VK_LOGIC_OP_AND;
enum VK_LOGIC_OP_AND_REVERSE   = VkLogicOp.VK_LOGIC_OP_AND_REVERSE;
enum VK_LOGIC_OP_COPY          = VkLogicOp.VK_LOGIC_OP_COPY;
enum VK_LOGIC_OP_AND_INVERTED  = VkLogicOp.VK_LOGIC_OP_AND_INVERTED;
enum VK_LOGIC_OP_NO_OP         = VkLogicOp.VK_LOGIC_OP_NO_OP;
enum VK_LOGIC_OP_XOR           = VkLogicOp.VK_LOGIC_OP_XOR;
enum VK_LOGIC_OP_OR            = VkLogicOp.VK_LOGIC_OP_OR;
enum VK_LOGIC_OP_NOR           = VkLogicOp.VK_LOGIC_OP_NOR;
enum VK_LOGIC_OP_EQUIVALENT    = VkLogicOp.VK_LOGIC_OP_EQUIVALENT;
enum VK_LOGIC_OP_INVERT        = VkLogicOp.VK_LOGIC_OP_INVERT;
enum VK_LOGIC_OP_OR_REVERSE    = VkLogicOp.VK_LOGIC_OP_OR_REVERSE;
enum VK_LOGIC_OP_COPY_INVERTED = VkLogicOp.VK_LOGIC_OP_COPY_INVERTED;
enum VK_LOGIC_OP_OR_INVERTED   = VkLogicOp.VK_LOGIC_OP_OR_INVERTED;
enum VK_LOGIC_OP_NAND          = VkLogicOp.VK_LOGIC_OP_NAND;
enum VK_LOGIC_OP_SET           = VkLogicOp.VK_LOGIC_OP_SET;

enum VkBlendFactor {
    VK_BLEND_FACTOR_ZERO                     = 0,
    VK_BLEND_FACTOR_ONE                      = 1,
    VK_BLEND_FACTOR_SRC_COLOR                = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR      = 3,
    VK_BLEND_FACTOR_DST_COLOR                = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR      = 5,
    VK_BLEND_FACTOR_SRC_ALPHA                = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA      = 7,
    VK_BLEND_FACTOR_DST_ALPHA                = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA      = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR           = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA           = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE       = 14,
    VK_BLEND_FACTOR_SRC1_COLOR               = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR     = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA               = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA     = 18,
}
enum VK_BLEND_FACTOR_ZERO                     = VkBlendFactor.VK_BLEND_FACTOR_ZERO;
enum VK_BLEND_FACTOR_ONE                      = VkBlendFactor.VK_BLEND_FACTOR_ONE;
enum VK_BLEND_FACTOR_SRC_COLOR                = VkBlendFactor.VK_BLEND_FACTOR_SRC_COLOR;
enum VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR      = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;
enum VK_BLEND_FACTOR_DST_COLOR                = VkBlendFactor.VK_BLEND_FACTOR_DST_COLOR;
enum VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR      = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR;
enum VK_BLEND_FACTOR_SRC_ALPHA                = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA;
enum VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA      = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
enum VK_BLEND_FACTOR_DST_ALPHA                = VkBlendFactor.VK_BLEND_FACTOR_DST_ALPHA;
enum VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA      = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;
enum VK_BLEND_FACTOR_CONSTANT_COLOR           = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_COLOR;
enum VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR;
enum VK_BLEND_FACTOR_CONSTANT_ALPHA           = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_ALPHA;
enum VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA;
enum VK_BLEND_FACTOR_SRC_ALPHA_SATURATE       = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA_SATURATE;
enum VK_BLEND_FACTOR_SRC1_COLOR               = VkBlendFactor.VK_BLEND_FACTOR_SRC1_COLOR;
enum VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR     = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR;
enum VK_BLEND_FACTOR_SRC1_ALPHA               = VkBlendFactor.VK_BLEND_FACTOR_SRC1_ALPHA;
enum VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA     = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA;

enum VkBlendOp {
    VK_BLEND_OP_ADD                    = 0,
    VK_BLEND_OP_SUBTRACT               = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT       = 2,
    VK_BLEND_OP_MIN                    = 3,
    VK_BLEND_OP_MAX                    = 4,
    VK_BLEND_OP_ZERO_EXT               = 1000148000,
    VK_BLEND_OP_SRC_EXT                = 1000148001,
    VK_BLEND_OP_DST_EXT                = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT           = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT           = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT             = 1000148005,
    VK_BLEND_OP_DST_IN_EXT             = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT            = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT            = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT           = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT           = 1000148010,
    VK_BLEND_OP_XOR_EXT                = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT           = 1000148012,
    VK_BLEND_OP_SCREEN_EXT             = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT            = 1000148014,
    VK_BLEND_OP_DARKEN_EXT             = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT            = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT         = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT          = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT          = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT          = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT         = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT          = 1000148022,
    VK_BLEND_OP_INVERT_EXT             = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT         = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT        = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT         = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT         = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT        = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT           = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT            = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT            = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT     = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT          = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT     = 1000148034,
    VK_BLEND_OP_PLUS_EXT               = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT       = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT        = 1000148038,
    VK_BLEND_OP_MINUS_EXT              = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT      = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT           = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT         = 1000148042,
    VK_BLEND_OP_RED_EXT                = 1000148043,
    VK_BLEND_OP_GREEN_EXT              = 1000148044,
    VK_BLEND_OP_BLUE_EXT               = 1000148045,
}
enum VK_BLEND_OP_ADD                    = VkBlendOp.VK_BLEND_OP_ADD;
enum VK_BLEND_OP_SUBTRACT               = VkBlendOp.VK_BLEND_OP_SUBTRACT;
enum VK_BLEND_OP_REVERSE_SUBTRACT       = VkBlendOp.VK_BLEND_OP_REVERSE_SUBTRACT;
enum VK_BLEND_OP_MIN                    = VkBlendOp.VK_BLEND_OP_MIN;
enum VK_BLEND_OP_MAX                    = VkBlendOp.VK_BLEND_OP_MAX;
enum VK_BLEND_OP_ZERO_EXT               = VkBlendOp.VK_BLEND_OP_ZERO_EXT;
enum VK_BLEND_OP_SRC_EXT                = VkBlendOp.VK_BLEND_OP_SRC_EXT;
enum VK_BLEND_OP_DST_EXT                = VkBlendOp.VK_BLEND_OP_DST_EXT;
enum VK_BLEND_OP_SRC_OVER_EXT           = VkBlendOp.VK_BLEND_OP_SRC_OVER_EXT;
enum VK_BLEND_OP_DST_OVER_EXT           = VkBlendOp.VK_BLEND_OP_DST_OVER_EXT;
enum VK_BLEND_OP_SRC_IN_EXT             = VkBlendOp.VK_BLEND_OP_SRC_IN_EXT;
enum VK_BLEND_OP_DST_IN_EXT             = VkBlendOp.VK_BLEND_OP_DST_IN_EXT;
enum VK_BLEND_OP_SRC_OUT_EXT            = VkBlendOp.VK_BLEND_OP_SRC_OUT_EXT;
enum VK_BLEND_OP_DST_OUT_EXT            = VkBlendOp.VK_BLEND_OP_DST_OUT_EXT;
enum VK_BLEND_OP_SRC_ATOP_EXT           = VkBlendOp.VK_BLEND_OP_SRC_ATOP_EXT;
enum VK_BLEND_OP_DST_ATOP_EXT           = VkBlendOp.VK_BLEND_OP_DST_ATOP_EXT;
enum VK_BLEND_OP_XOR_EXT                = VkBlendOp.VK_BLEND_OP_XOR_EXT;
enum VK_BLEND_OP_MULTIPLY_EXT           = VkBlendOp.VK_BLEND_OP_MULTIPLY_EXT;
enum VK_BLEND_OP_SCREEN_EXT             = VkBlendOp.VK_BLEND_OP_SCREEN_EXT;
enum VK_BLEND_OP_OVERLAY_EXT            = VkBlendOp.VK_BLEND_OP_OVERLAY_EXT;
enum VK_BLEND_OP_DARKEN_EXT             = VkBlendOp.VK_BLEND_OP_DARKEN_EXT;
enum VK_BLEND_OP_LIGHTEN_EXT            = VkBlendOp.VK_BLEND_OP_LIGHTEN_EXT;
enum VK_BLEND_OP_COLORDODGE_EXT         = VkBlendOp.VK_BLEND_OP_COLORDODGE_EXT;
enum VK_BLEND_OP_COLORBURN_EXT          = VkBlendOp.VK_BLEND_OP_COLORBURN_EXT;
enum VK_BLEND_OP_HARDLIGHT_EXT          = VkBlendOp.VK_BLEND_OP_HARDLIGHT_EXT;
enum VK_BLEND_OP_SOFTLIGHT_EXT          = VkBlendOp.VK_BLEND_OP_SOFTLIGHT_EXT;
enum VK_BLEND_OP_DIFFERENCE_EXT         = VkBlendOp.VK_BLEND_OP_DIFFERENCE_EXT;
enum VK_BLEND_OP_EXCLUSION_EXT          = VkBlendOp.VK_BLEND_OP_EXCLUSION_EXT;
enum VK_BLEND_OP_INVERT_EXT             = VkBlendOp.VK_BLEND_OP_INVERT_EXT;
enum VK_BLEND_OP_INVERT_RGB_EXT         = VkBlendOp.VK_BLEND_OP_INVERT_RGB_EXT;
enum VK_BLEND_OP_LINEARDODGE_EXT        = VkBlendOp.VK_BLEND_OP_LINEARDODGE_EXT;
enum VK_BLEND_OP_LINEARBURN_EXT         = VkBlendOp.VK_BLEND_OP_LINEARBURN_EXT;
enum VK_BLEND_OP_VIVIDLIGHT_EXT         = VkBlendOp.VK_BLEND_OP_VIVIDLIGHT_EXT;
enum VK_BLEND_OP_LINEARLIGHT_EXT        = VkBlendOp.VK_BLEND_OP_LINEARLIGHT_EXT;
enum VK_BLEND_OP_PINLIGHT_EXT           = VkBlendOp.VK_BLEND_OP_PINLIGHT_EXT;
enum VK_BLEND_OP_HARDMIX_EXT            = VkBlendOp.VK_BLEND_OP_HARDMIX_EXT;
enum VK_BLEND_OP_HSL_HUE_EXT            = VkBlendOp.VK_BLEND_OP_HSL_HUE_EXT;
enum VK_BLEND_OP_HSL_SATURATION_EXT     = VkBlendOp.VK_BLEND_OP_HSL_SATURATION_EXT;
enum VK_BLEND_OP_HSL_COLOR_EXT          = VkBlendOp.VK_BLEND_OP_HSL_COLOR_EXT;
enum VK_BLEND_OP_HSL_LUMINOSITY_EXT     = VkBlendOp.VK_BLEND_OP_HSL_LUMINOSITY_EXT;
enum VK_BLEND_OP_PLUS_EXT               = VkBlendOp.VK_BLEND_OP_PLUS_EXT;
enum VK_BLEND_OP_PLUS_CLAMPED_EXT       = VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_EXT;
enum VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT;
enum VK_BLEND_OP_PLUS_DARKER_EXT        = VkBlendOp.VK_BLEND_OP_PLUS_DARKER_EXT;
enum VK_BLEND_OP_MINUS_EXT              = VkBlendOp.VK_BLEND_OP_MINUS_EXT;
enum VK_BLEND_OP_MINUS_CLAMPED_EXT      = VkBlendOp.VK_BLEND_OP_MINUS_CLAMPED_EXT;
enum VK_BLEND_OP_CONTRAST_EXT           = VkBlendOp.VK_BLEND_OP_CONTRAST_EXT;
enum VK_BLEND_OP_INVERT_OVG_EXT         = VkBlendOp.VK_BLEND_OP_INVERT_OVG_EXT;
enum VK_BLEND_OP_RED_EXT                = VkBlendOp.VK_BLEND_OP_RED_EXT;
enum VK_BLEND_OP_GREEN_EXT              = VkBlendOp.VK_BLEND_OP_GREEN_EXT;
enum VK_BLEND_OP_BLUE_EXT               = VkBlendOp.VK_BLEND_OP_BLUE_EXT;

enum VkColorComponentFlagBits : VkFlags {
    VK_COLOR_COMPONENT_R_BIT = 0x00000001,
    VK_COLOR_COMPONENT_G_BIT = 0x00000002,
    VK_COLOR_COMPONENT_B_BIT = 0x00000004,
    VK_COLOR_COMPONENT_A_BIT = 0x00000008,
}
enum VK_COLOR_COMPONENT_R_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT;
enum VK_COLOR_COMPONENT_G_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT;
enum VK_COLOR_COMPONENT_B_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT;
enum VK_COLOR_COMPONENT_A_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT;

enum VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT              = 0,
    VK_DYNAMIC_STATE_SCISSOR               = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH            = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS            = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS       = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS          = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK  = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK    = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE     = 8,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT  = 1000143000,
}
enum VK_DYNAMIC_STATE_VIEWPORT              = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT;
enum VK_DYNAMIC_STATE_SCISSOR               = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR;
enum VK_DYNAMIC_STATE_LINE_WIDTH            = VkDynamicState.VK_DYNAMIC_STATE_LINE_WIDTH;
enum VK_DYNAMIC_STATE_DEPTH_BIAS            = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS;
enum VK_DYNAMIC_STATE_BLEND_CONSTANTS       = VkDynamicState.VK_DYNAMIC_STATE_BLEND_CONSTANTS;
enum VK_DYNAMIC_STATE_DEPTH_BOUNDS          = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS;
enum VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK  = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK;
enum VK_DYNAMIC_STATE_STENCIL_WRITE_MASK    = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_WRITE_MASK;
enum VK_DYNAMIC_STATE_STENCIL_REFERENCE     = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE;
enum VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV;
enum VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT;
enum VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT  = VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT;

enum VkFilter {
    VK_FILTER_NEAREST   = 0,
    VK_FILTER_LINEAR    = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
}
enum VK_FILTER_NEAREST   = VkFilter.VK_FILTER_NEAREST;
enum VK_FILTER_LINEAR    = VkFilter.VK_FILTER_LINEAR;
enum VK_FILTER_CUBIC_IMG = VkFilter.VK_FILTER_CUBIC_IMG;

enum VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR  = 1,
}
enum VK_SAMPLER_MIPMAP_MODE_NEAREST = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST;
enum VK_SAMPLER_MIPMAP_MODE_LINEAR  = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR;

enum VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT               = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT      = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE        = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER      = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
}
enum VK_SAMPLER_ADDRESS_MODE_REPEAT               = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT;
enum VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT      = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;
enum VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE        = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
enum VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER      = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER;
enum VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;

enum VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK   = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK      = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK        = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE      = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE        = 5,
}
enum VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK;
enum VK_BORDER_COLOR_INT_TRANSPARENT_BLACK   = VkBorderColor.VK_BORDER_COLOR_INT_TRANSPARENT_BLACK;
enum VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK      = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK;
enum VK_BORDER_COLOR_INT_OPAQUE_BLACK        = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_BLACK;
enum VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE      = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE;
enum VK_BORDER_COLOR_INT_OPAQUE_WHITE        = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE;

enum VkDescriptorSetLayoutCreateFlagBits : VkFlags {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001,
}
enum VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR;

enum VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER                = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE          = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE          = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER   = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER   = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER         = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER         = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT       = 10,
}
enum VK_DESCRIPTOR_TYPE_SAMPLER                = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER;
enum VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
enum VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE          = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
enum VK_DESCRIPTOR_TYPE_STORAGE_IMAGE          = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
enum VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER   = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER;
enum VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER   = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER;
enum VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER         = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
enum VK_DESCRIPTOR_TYPE_STORAGE_BUFFER         = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
enum VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC;
enum VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC;
enum VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT       = VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT;

enum VkDescriptorPoolCreateFlagBits : VkFlags {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
}
enum VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;

enum VkAttachmentDescriptionFlagBits : VkFlags {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
}
enum VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT;

enum VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD      = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR     = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
}
enum VK_ATTACHMENT_LOAD_OP_LOAD      = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD;
enum VK_ATTACHMENT_LOAD_OP_CLEAR     = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_CLEAR;
enum VK_ATTACHMENT_LOAD_OP_DONT_CARE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE;

enum VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE     = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
}
enum VK_ATTACHMENT_STORE_OP_STORE     = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE;
enum VK_ATTACHMENT_STORE_OP_DONT_CARE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE;

enum VkSubpassDescriptionFlagBits : VkFlags {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX      = 0x00000001,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
}
enum VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX      = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX;
enum VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX;

enum VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE  = 1,
}
enum VK_PIPELINE_BIND_POINT_GRAPHICS = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS;
enum VK_PIPELINE_BIND_POINT_COMPUTE  = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE;

enum VkAccessFlagBits : VkFlags {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT                 = 0x00000001,
    VK_ACCESS_INDEX_READ_BIT                            = 0x00000002,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT                 = 0x00000004,
    VK_ACCESS_UNIFORM_READ_BIT                          = 0x00000008,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT                 = 0x00000010,
    VK_ACCESS_SHADER_READ_BIT                           = 0x00000020,
    VK_ACCESS_SHADER_WRITE_BIT                          = 0x00000040,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT                 = 0x00000080,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT                = 0x00000100,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT         = 0x00000200,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT        = 0x00000400,
    VK_ACCESS_TRANSFER_READ_BIT                         = 0x00000800,
    VK_ACCESS_TRANSFER_WRITE_BIT                        = 0x00001000,
    VK_ACCESS_HOST_READ_BIT                             = 0x00002000,
    VK_ACCESS_HOST_WRITE_BIT                            = 0x00004000,
    VK_ACCESS_MEMORY_READ_BIT                           = 0x00008000,
    VK_ACCESS_MEMORY_WRITE_BIT                          = 0x00010000,
    VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX              = 0x00020000,
    VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX             = 0x00040000,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
}
enum VK_ACCESS_INDIRECT_COMMAND_READ_BIT                 = VkAccessFlagBits.VK_ACCESS_INDIRECT_COMMAND_READ_BIT;
enum VK_ACCESS_INDEX_READ_BIT                            = VkAccessFlagBits.VK_ACCESS_INDEX_READ_BIT;
enum VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT                 = VkAccessFlagBits.VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT;
enum VK_ACCESS_UNIFORM_READ_BIT                          = VkAccessFlagBits.VK_ACCESS_UNIFORM_READ_BIT;
enum VK_ACCESS_INPUT_ATTACHMENT_READ_BIT                 = VkAccessFlagBits.VK_ACCESS_INPUT_ATTACHMENT_READ_BIT;
enum VK_ACCESS_SHADER_READ_BIT                           = VkAccessFlagBits.VK_ACCESS_SHADER_READ_BIT;
enum VK_ACCESS_SHADER_WRITE_BIT                          = VkAccessFlagBits.VK_ACCESS_SHADER_WRITE_BIT;
enum VK_ACCESS_COLOR_ATTACHMENT_READ_BIT                 = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_BIT;
enum VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT                = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
enum VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT         = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
enum VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT        = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
enum VK_ACCESS_TRANSFER_READ_BIT                         = VkAccessFlagBits.VK_ACCESS_TRANSFER_READ_BIT;
enum VK_ACCESS_TRANSFER_WRITE_BIT                        = VkAccessFlagBits.VK_ACCESS_TRANSFER_WRITE_BIT;
enum VK_ACCESS_HOST_READ_BIT                             = VkAccessFlagBits.VK_ACCESS_HOST_READ_BIT;
enum VK_ACCESS_HOST_WRITE_BIT                            = VkAccessFlagBits.VK_ACCESS_HOST_WRITE_BIT;
enum VK_ACCESS_MEMORY_READ_BIT                           = VkAccessFlagBits.VK_ACCESS_MEMORY_READ_BIT;
enum VK_ACCESS_MEMORY_WRITE_BIT                          = VkAccessFlagBits.VK_ACCESS_MEMORY_WRITE_BIT;
enum VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX              = VkAccessFlagBits.VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX;
enum VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX             = VkAccessFlagBits.VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX;
enum VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT;

enum VkDependencyFlagBits : VkFlags {
    VK_DEPENDENCY_BY_REGION_BIT        = 0x00000001,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHX   = 0x00000002,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHX = 0x00000004,
}
enum VK_DEPENDENCY_BY_REGION_BIT        = VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT;
enum VK_DEPENDENCY_VIEW_LOCAL_BIT_KHX   = VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT_KHX;
enum VK_DEPENDENCY_DEVICE_GROUP_BIT_KHX = VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT_KHX;

enum VkCommandPoolCreateFlagBits : VkFlags {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT            = 0x00000001,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
}
enum VK_COMMAND_POOL_CREATE_TRANSIENT_BIT            = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT;
enum VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;

enum VkCommandPoolResetFlagBits : VkFlags {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
}
enum VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT;

enum VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY   = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
}
enum VK_COMMAND_BUFFER_LEVEL_PRIMARY   = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY;
enum VK_COMMAND_BUFFER_LEVEL_SECONDARY = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY;

enum VkCommandBufferUsageFlagBits : VkFlags {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT      = 0x00000001,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT     = 0x00000004,
}
enum VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT      = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;
enum VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT;
enum VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT     = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT;

enum VkQueryControlFlagBits : VkFlags {
    VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,
}
enum VK_QUERY_CONTROL_PRECISE_BIT = VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT;

enum VkCommandBufferResetFlagBits : VkFlags {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
}
enum VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT;

enum VkStencilFaceFlagBits : VkFlags {
    VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
    VK_STENCIL_FACE_BACK_BIT  = 0x00000002,
    VK_STENCIL_FRONT_AND_BACK = 0x00000003,
}
enum VK_STENCIL_FACE_FRONT_BIT = VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT;
enum VK_STENCIL_FACE_BACK_BIT  = VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT;
enum VK_STENCIL_FRONT_AND_BACK = VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK;

enum VkIndexType {
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
}
enum VK_INDEX_TYPE_UINT16 = VkIndexType.VK_INDEX_TYPE_UINT16;
enum VK_INDEX_TYPE_UINT32 = VkIndexType.VK_INDEX_TYPE_UINT32;

enum VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE                    = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
}
enum VK_SUBPASS_CONTENTS_INLINE                    = VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE;
enum VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS;

enum VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN                        = 0,
    VK_OBJECT_TYPE_INSTANCE                       = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE                = 2,
    VK_OBJECT_TYPE_DEVICE                         = 3,
    VK_OBJECT_TYPE_QUEUE                          = 4,
    VK_OBJECT_TYPE_SEMAPHORE                      = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER                 = 6,
    VK_OBJECT_TYPE_FENCE                          = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY                  = 8,
    VK_OBJECT_TYPE_BUFFER                         = 9,
    VK_OBJECT_TYPE_IMAGE                          = 10,
    VK_OBJECT_TYPE_EVENT                          = 11,
    VK_OBJECT_TYPE_QUERY_POOL                     = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW                    = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW                     = 14,
    VK_OBJECT_TYPE_SHADER_MODULE                  = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE                 = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT                = 17,
    VK_OBJECT_TYPE_RENDER_PASS                    = 18,
    VK_OBJECT_TYPE_PIPELINE                       = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT          = 20,
    VK_OBJECT_TYPE_SAMPLER                        = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL                = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET                 = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER                    = 24,
    VK_OBJECT_TYPE_COMMAND_POOL                   = 25,
    VK_OBJECT_TYPE_SURFACE_KHR                    = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR                  = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR                    = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR               = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT      = 1000011000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000,
    VK_OBJECT_TYPE_OBJECT_TABLE_NVX               = 1000086000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX   = 1000086001,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR   = 1000156000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT           = 1000160000,
}
enum VK_OBJECT_TYPE_UNKNOWN                        = VkObjectType.VK_OBJECT_TYPE_UNKNOWN;
enum VK_OBJECT_TYPE_INSTANCE                       = VkObjectType.VK_OBJECT_TYPE_INSTANCE;
enum VK_OBJECT_TYPE_PHYSICAL_DEVICE                = VkObjectType.VK_OBJECT_TYPE_PHYSICAL_DEVICE;
enum VK_OBJECT_TYPE_DEVICE                         = VkObjectType.VK_OBJECT_TYPE_DEVICE;
enum VK_OBJECT_TYPE_QUEUE                          = VkObjectType.VK_OBJECT_TYPE_QUEUE;
enum VK_OBJECT_TYPE_SEMAPHORE                      = VkObjectType.VK_OBJECT_TYPE_SEMAPHORE;
enum VK_OBJECT_TYPE_COMMAND_BUFFER                 = VkObjectType.VK_OBJECT_TYPE_COMMAND_BUFFER;
enum VK_OBJECT_TYPE_FENCE                          = VkObjectType.VK_OBJECT_TYPE_FENCE;
enum VK_OBJECT_TYPE_DEVICE_MEMORY                  = VkObjectType.VK_OBJECT_TYPE_DEVICE_MEMORY;
enum VK_OBJECT_TYPE_BUFFER                         = VkObjectType.VK_OBJECT_TYPE_BUFFER;
enum VK_OBJECT_TYPE_IMAGE                          = VkObjectType.VK_OBJECT_TYPE_IMAGE;
enum VK_OBJECT_TYPE_EVENT                          = VkObjectType.VK_OBJECT_TYPE_EVENT;
enum VK_OBJECT_TYPE_QUERY_POOL                     = VkObjectType.VK_OBJECT_TYPE_QUERY_POOL;
enum VK_OBJECT_TYPE_BUFFER_VIEW                    = VkObjectType.VK_OBJECT_TYPE_BUFFER_VIEW;
enum VK_OBJECT_TYPE_IMAGE_VIEW                     = VkObjectType.VK_OBJECT_TYPE_IMAGE_VIEW;
enum VK_OBJECT_TYPE_SHADER_MODULE                  = VkObjectType.VK_OBJECT_TYPE_SHADER_MODULE;
enum VK_OBJECT_TYPE_PIPELINE_CACHE                 = VkObjectType.VK_OBJECT_TYPE_PIPELINE_CACHE;
enum VK_OBJECT_TYPE_PIPELINE_LAYOUT                = VkObjectType.VK_OBJECT_TYPE_PIPELINE_LAYOUT;
enum VK_OBJECT_TYPE_RENDER_PASS                    = VkObjectType.VK_OBJECT_TYPE_RENDER_PASS;
enum VK_OBJECT_TYPE_PIPELINE                       = VkObjectType.VK_OBJECT_TYPE_PIPELINE;
enum VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT          = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT;
enum VK_OBJECT_TYPE_SAMPLER                        = VkObjectType.VK_OBJECT_TYPE_SAMPLER;
enum VK_OBJECT_TYPE_DESCRIPTOR_POOL                = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_POOL;
enum VK_OBJECT_TYPE_DESCRIPTOR_SET                 = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET;
enum VK_OBJECT_TYPE_FRAMEBUFFER                    = VkObjectType.VK_OBJECT_TYPE_FRAMEBUFFER;
enum VK_OBJECT_TYPE_COMMAND_POOL                   = VkObjectType.VK_OBJECT_TYPE_COMMAND_POOL;
enum VK_OBJECT_TYPE_SURFACE_KHR                    = VkObjectType.VK_OBJECT_TYPE_SURFACE_KHR;
enum VK_OBJECT_TYPE_SWAPCHAIN_KHR                  = VkObjectType.VK_OBJECT_TYPE_SWAPCHAIN_KHR;
enum VK_OBJECT_TYPE_DISPLAY_KHR                    = VkObjectType.VK_OBJECT_TYPE_DISPLAY_KHR;
enum VK_OBJECT_TYPE_DISPLAY_MODE_KHR               = VkObjectType.VK_OBJECT_TYPE_DISPLAY_MODE_KHR;
enum VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT      = VkObjectType.VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT;
enum VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR;
enum VK_OBJECT_TYPE_OBJECT_TABLE_NVX               = VkObjectType.VK_OBJECT_TYPE_OBJECT_TABLE_NVX;
enum VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX   = VkObjectType.VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX;
enum VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR   = VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR;
enum VK_OBJECT_TYPE_VALIDATION_CACHE_EXT           = VkObjectType.VK_OBJECT_TYPE_VALIDATION_CACHE_EXT;


// VK_KHR_surface
enum VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR                     = 0x00000001,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR                    = 0x00000002,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR                   = 0x00000004,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR                   = 0x00000008,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR            = 0x00000010,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR  = 0x00000020,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR                      = 0x00000100,
}
enum VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR                     = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
enum VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR                    = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR;
enum VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR                   = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR;
enum VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR                   = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR;
enum VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR            = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR;
enum VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR  = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR;
enum VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR;
enum VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR;
enum VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR                      = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR;

enum VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR          = 0x00000001,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR  = 0x00000002,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR         = 0x00000008,
}
enum VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR          = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
enum VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR  = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR;
enum VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR;
enum VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR         = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR;

enum VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR          = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT    = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT    = 1000104002,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT           = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT        = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT            = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT         = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT           = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT            = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT             = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT               = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT         = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT      = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT            = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
}
enum VK_COLOR_SPACE_SRGB_NONLINEAR_KHR          = VkColorSpaceKHR.VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;
enum VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT    = VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT;
enum VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT    = VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT;
enum VK_COLOR_SPACE_DCI_P3_LINEAR_EXT           = VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_LINEAR_EXT;
enum VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT        = VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT;
enum VK_COLOR_SPACE_BT709_LINEAR_EXT            = VkColorSpaceKHR.VK_COLOR_SPACE_BT709_LINEAR_EXT;
enum VK_COLOR_SPACE_BT709_NONLINEAR_EXT         = VkColorSpaceKHR.VK_COLOR_SPACE_BT709_NONLINEAR_EXT;
enum VK_COLOR_SPACE_BT2020_LINEAR_EXT           = VkColorSpaceKHR.VK_COLOR_SPACE_BT2020_LINEAR_EXT;
enum VK_COLOR_SPACE_HDR10_ST2084_EXT            = VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_ST2084_EXT;
enum VK_COLOR_SPACE_DOLBYVISION_EXT             = VkColorSpaceKHR.VK_COLOR_SPACE_DOLBYVISION_EXT;
enum VK_COLOR_SPACE_HDR10_HLG_EXT               = VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_HLG_EXT;
enum VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT         = VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT;
enum VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT      = VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT;
enum VK_COLOR_SPACE_PASS_THROUGH_EXT            = VkColorSpaceKHR.VK_COLOR_SPACE_PASS_THROUGH_EXT;
enum VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT;

enum VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR                 = 0,
    VK_PRESENT_MODE_MAILBOX_KHR                   = 1,
    VK_PRESENT_MODE_FIFO_KHR                      = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR              = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR     = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
}
enum VK_PRESENT_MODE_IMMEDIATE_KHR                 = VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR;
enum VK_PRESENT_MODE_MAILBOX_KHR                   = VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR;
enum VK_PRESENT_MODE_FIFO_KHR                      = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR;
enum VK_PRESENT_MODE_FIFO_RELAXED_KHR              = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR;
enum VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR     = VkPresentModeKHR.VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR;
enum VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = VkPresentModeKHR.VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR;


// VK_KHR_swapchain
enum VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_BIND_SFR_BIT_KHX = 0x00000001,
}
enum VK_SWAPCHAIN_CREATE_BIND_SFR_BIT_KHX = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_BIND_SFR_BIT_KHX;


// VK_KHR_display
enum VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR                  = 0x00000001,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR                  = 0x00000002,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR               = 0x00000004,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
}
enum VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR                  = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR;
enum VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR                  = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR;
enum VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR               = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR;
enum VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR;


// Structures

// VK_VERSION_1_0
struct VkApplicationInfo {
    VkStructureType sType;
    const(void)*    pNext;
    const(char)*    pApplicationName;
    uint32_t        applicationVersion;
    const(char)*    pEngineName;
    uint32_t        engineVersion;
    uint32_t        apiVersion;
}
struct VkInstanceCreateInfo {
    VkStructureType           sType;
    const(void)*              pNext;
    VkInstanceCreateFlags     flags;
    const(VkApplicationInfo)* pApplicationInfo;
    uint32_t                  enabledLayerCount;
    const(char*)*             ppEnabledLayerNames;
    uint32_t                  enabledExtensionCount;
    const(char*)*             ppEnabledExtensionNames;
}
struct VkAllocationCallbacks {
    void*                                pUserData;
    PFN_vkAllocationFunction             pfnAllocation;
    PFN_vkReallocationFunction           pfnReallocation;
    PFN_vkFreeFunction                   pfnFree;
    PFN_vkInternalAllocationNotification pfnInternalAllocation;
    PFN_vkInternalFreeNotification       pfnInternalFree;
}
struct VkPhysicalDeviceFeatures {
    VkBool32 robustBufferAccess;
    VkBool32 fullDrawIndexUint32;
    VkBool32 imageCubeArray;
    VkBool32 independentBlend;
    VkBool32 geometryShader;
    VkBool32 tessellationShader;
    VkBool32 sampleRateShading;
    VkBool32 dualSrcBlend;
    VkBool32 logicOp;
    VkBool32 multiDrawIndirect;
    VkBool32 drawIndirectFirstInstance;
    VkBool32 depthClamp;
    VkBool32 depthBiasClamp;
    VkBool32 fillModeNonSolid;
    VkBool32 depthBounds;
    VkBool32 wideLines;
    VkBool32 largePoints;
    VkBool32 alphaToOne;
    VkBool32 multiViewport;
    VkBool32 samplerAnisotropy;
    VkBool32 textureCompressionETC2;
    VkBool32 textureCompressionASTC_LDR;
    VkBool32 textureCompressionBC;
    VkBool32 occlusionQueryPrecise;
    VkBool32 pipelineStatisticsQuery;
    VkBool32 vertexPipelineStoresAndAtomics;
    VkBool32 fragmentStoresAndAtomics;
    VkBool32 shaderTessellationAndGeometryPointSize;
    VkBool32 shaderImageGatherExtended;
    VkBool32 shaderStorageImageExtendedFormats;
    VkBool32 shaderStorageImageMultisample;
    VkBool32 shaderStorageImageReadWithoutFormat;
    VkBool32 shaderStorageImageWriteWithoutFormat;
    VkBool32 shaderUniformBufferArrayDynamicIndexing;
    VkBool32 shaderSampledImageArrayDynamicIndexing;
    VkBool32 shaderStorageBufferArrayDynamicIndexing;
    VkBool32 shaderStorageImageArrayDynamicIndexing;
    VkBool32 shaderClipDistance;
    VkBool32 shaderCullDistance;
    VkBool32 shaderFloat64;
    VkBool32 shaderInt64;
    VkBool32 shaderInt16;
    VkBool32 shaderResourceResidency;
    VkBool32 shaderResourceMinLod;
    VkBool32 sparseBinding;
    VkBool32 sparseResidencyBuffer;
    VkBool32 sparseResidencyImage2D;
    VkBool32 sparseResidencyImage3D;
    VkBool32 sparseResidency2Samples;
    VkBool32 sparseResidency4Samples;
    VkBool32 sparseResidency8Samples;
    VkBool32 sparseResidency16Samples;
    VkBool32 sparseResidencyAliased;
    VkBool32 variableMultisampleRate;
    VkBool32 inheritedQueries;
}
struct VkFormatProperties {
    VkFormatFeatureFlags linearTilingFeatures;
    VkFormatFeatureFlags optimalTilingFeatures;
    VkFormatFeatureFlags bufferFeatures;
}
struct VkExtent3D {
    uint32_t width;
    uint32_t height;
    uint32_t depth;
}
struct VkImageFormatProperties {
    VkExtent3D         maxExtent;
    uint32_t           maxMipLevels;
    uint32_t           maxArrayLayers;
    VkSampleCountFlags sampleCounts;
    VkDeviceSize       maxResourceSize;
}
struct VkPhysicalDeviceLimits {
    uint32_t           maxImageDimension1D;
    uint32_t           maxImageDimension2D;
    uint32_t           maxImageDimension3D;
    uint32_t           maxImageDimensionCube;
    uint32_t           maxImageArrayLayers;
    uint32_t           maxTexelBufferElements;
    uint32_t           maxUniformBufferRange;
    uint32_t           maxStorageBufferRange;
    uint32_t           maxPushConstantsSize;
    uint32_t           maxMemoryAllocationCount;
    uint32_t           maxSamplerAllocationCount;
    VkDeviceSize       bufferImageGranularity;
    VkDeviceSize       sparseAddressSpaceSize;
    uint32_t           maxBoundDescriptorSets;
    uint32_t           maxPerStageDescriptorSamplers;
    uint32_t           maxPerStageDescriptorUniformBuffers;
    uint32_t           maxPerStageDescriptorStorageBuffers;
    uint32_t           maxPerStageDescriptorSampledImages;
    uint32_t           maxPerStageDescriptorStorageImages;
    uint32_t           maxPerStageDescriptorInputAttachments;
    uint32_t           maxPerStageResources;
    uint32_t           maxDescriptorSetSamplers;
    uint32_t           maxDescriptorSetUniformBuffers;
    uint32_t           maxDescriptorSetUniformBuffersDynamic;
    uint32_t           maxDescriptorSetStorageBuffers;
    uint32_t           maxDescriptorSetStorageBuffersDynamic;
    uint32_t           maxDescriptorSetSampledImages;
    uint32_t           maxDescriptorSetStorageImages;
    uint32_t           maxDescriptorSetInputAttachments;
    uint32_t           maxVertexInputAttributes;
    uint32_t           maxVertexInputBindings;
    uint32_t           maxVertexInputAttributeOffset;
    uint32_t           maxVertexInputBindingStride;
    uint32_t           maxVertexOutputComponents;
    uint32_t           maxTessellationGenerationLevel;
    uint32_t           maxTessellationPatchSize;
    uint32_t           maxTessellationControlPerVertexInputComponents;
    uint32_t           maxTessellationControlPerVertexOutputComponents;
    uint32_t           maxTessellationControlPerPatchOutputComponents;
    uint32_t           maxTessellationControlTotalOutputComponents;
    uint32_t           maxTessellationEvaluationInputComponents;
    uint32_t           maxTessellationEvaluationOutputComponents;
    uint32_t           maxGeometryShaderInvocations;
    uint32_t           maxGeometryInputComponents;
    uint32_t           maxGeometryOutputComponents;
    uint32_t           maxGeometryOutputVertices;
    uint32_t           maxGeometryTotalOutputComponents;
    uint32_t           maxFragmentInputComponents;
    uint32_t           maxFragmentOutputAttachments;
    uint32_t           maxFragmentDualSrcAttachments;
    uint32_t           maxFragmentCombinedOutputResources;
    uint32_t           maxComputeSharedMemorySize;
    uint32_t[3]        maxComputeWorkGroupCount;
    uint32_t           maxComputeWorkGroupInvocations;
    uint32_t[3]        maxComputeWorkGroupSize;
    uint32_t           subPixelPrecisionBits;
    uint32_t           subTexelPrecisionBits;
    uint32_t           mipmapPrecisionBits;
    uint32_t           maxDrawIndexedIndexValue;
    uint32_t           maxDrawIndirectCount;
    float              maxSamplerLodBias;
    float              maxSamplerAnisotropy;
    uint32_t           maxViewports;
    uint32_t[2]        maxViewportDimensions;
    float[2]           viewportBoundsRange;
    uint32_t           viewportSubPixelBits;
    size_t             minMemoryMapAlignment;
    VkDeviceSize       minTexelBufferOffsetAlignment;
    VkDeviceSize       minUniformBufferOffsetAlignment;
    VkDeviceSize       minStorageBufferOffsetAlignment;
    int32_t            minTexelOffset;
    uint32_t           maxTexelOffset;
    int32_t            minTexelGatherOffset;
    uint32_t           maxTexelGatherOffset;
    float              minInterpolationOffset;
    float              maxInterpolationOffset;
    uint32_t           subPixelInterpolationOffsetBits;
    uint32_t           maxFramebufferWidth;
    uint32_t           maxFramebufferHeight;
    uint32_t           maxFramebufferLayers;
    VkSampleCountFlags framebufferColorSampleCounts;
    VkSampleCountFlags framebufferDepthSampleCounts;
    VkSampleCountFlags framebufferStencilSampleCounts;
    VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
    uint32_t           maxColorAttachments;
    VkSampleCountFlags sampledImageColorSampleCounts;
    VkSampleCountFlags sampledImageIntegerSampleCounts;
    VkSampleCountFlags sampledImageDepthSampleCounts;
    VkSampleCountFlags sampledImageStencilSampleCounts;
    VkSampleCountFlags storageImageSampleCounts;
    uint32_t           maxSampleMaskWords;
    VkBool32           timestampComputeAndGraphics;
    float              timestampPeriod;
    uint32_t           maxClipDistances;
    uint32_t           maxCullDistances;
    uint32_t           maxCombinedClipAndCullDistances;
    uint32_t           discreteQueuePriorities;
    float[2]           pointSizeRange;
    float[2]           lineWidthRange;
    float              pointSizeGranularity;
    float              lineWidthGranularity;
    VkBool32           strictLines;
    VkBool32           standardSampleLocations;
    VkDeviceSize       optimalBufferCopyOffsetAlignment;
    VkDeviceSize       optimalBufferCopyRowPitchAlignment;
    VkDeviceSize       nonCoherentAtomSize;
}
struct VkPhysicalDeviceSparseProperties {
    VkBool32 residencyStandard2DBlockShape;
    VkBool32 residencyStandard2DMultisampleBlockShape;
    VkBool32 residencyStandard3DBlockShape;
    VkBool32 residencyAlignedMipSize;
    VkBool32 residencyNonResidentStrict;
}
struct VkPhysicalDeviceProperties {
    uint32_t                               apiVersion;
    uint32_t                               driverVersion;
    uint32_t                               vendorID;
    uint32_t                               deviceID;
    VkPhysicalDeviceType                   deviceType;
    char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] deviceName;
    uint8_t[VK_UUID_SIZE]                  pipelineCacheUUID;
    VkPhysicalDeviceLimits                 limits;
    VkPhysicalDeviceSparseProperties       sparseProperties;
}
struct VkQueueFamilyProperties {
    VkQueueFlags queueFlags;
    uint32_t     queueCount;
    uint32_t     timestampValidBits;
    VkExtent3D   minImageTransferGranularity;
}
struct VkMemoryType {
    VkMemoryPropertyFlags propertyFlags;
    uint32_t              heapIndex;
}
struct VkMemoryHeap {
    VkDeviceSize      size;
    VkMemoryHeapFlags flags;
}
struct VkPhysicalDeviceMemoryProperties {
    uint32_t                          memoryTypeCount;
    VkMemoryType[VK_MAX_MEMORY_TYPES] memoryTypes;
    uint32_t                          memoryHeapCount;
    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] memoryHeaps;
}
struct VkDeviceQueueCreateInfo {
    VkStructureType          sType;
    const(void)*             pNext;
    VkDeviceQueueCreateFlags flags;
    uint32_t                 queueFamilyIndex;
    uint32_t                 queueCount;
    const(float)*            pQueuePriorities;
}
struct VkDeviceCreateInfo {
    VkStructureType                  sType;
    const(void)*                     pNext;
    VkDeviceCreateFlags              flags;
    uint32_t                         queueCreateInfoCount;
    const(VkDeviceQueueCreateInfo)*  pQueueCreateInfos;
    uint32_t                         enabledLayerCount;
    const(char*)*                    ppEnabledLayerNames;
    uint32_t                         enabledExtensionCount;
    const(char*)*                    ppEnabledExtensionNames;
    const(VkPhysicalDeviceFeatures)* pEnabledFeatures;
}
struct VkExtensionProperties {
    char[VK_MAX_EXTENSION_NAME_SIZE] extensionName;
    uint32_t                         specVersion;
}
struct VkLayerProperties {
    char[VK_MAX_EXTENSION_NAME_SIZE] layerName;
    uint32_t                         specVersion;
    uint32_t                         implementationVersion;
    char[VK_MAX_DESCRIPTION_SIZE]    description;
}
struct VkSubmitInfo {
    VkStructureType              sType;
    const(void)*                 pNext;
    uint32_t                     waitSemaphoreCount;
    const(VkSemaphore)*          pWaitSemaphores;
    const(VkPipelineStageFlags)* pWaitDstStageMask;
    uint32_t                     commandBufferCount;
    const(VkCommandBuffer)*      pCommandBuffers;
    uint32_t                     signalSemaphoreCount;
    const(VkSemaphore)*          pSignalSemaphores;
}
struct VkMemoryAllocateInfo {
    VkStructureType sType;
    const(void)*    pNext;
    VkDeviceSize    allocationSize;
    uint32_t        memoryTypeIndex;
}
struct VkMappedMemoryRange {
    VkStructureType sType;
    const(void)*    pNext;
    VkDeviceMemory  memory;
    VkDeviceSize    offset;
    VkDeviceSize    size;
}
struct VkMemoryRequirements {
    VkDeviceSize size;
    VkDeviceSize alignment;
    uint32_t     memoryTypeBits;
}
struct VkSparseImageFormatProperties {
    VkImageAspectFlags       aspectMask;
    VkExtent3D               imageGranularity;
    VkSparseImageFormatFlags flags;
}
struct VkSparseImageMemoryRequirements {
    VkSparseImageFormatProperties formatProperties;
    uint32_t                      imageMipTailFirstLod;
    VkDeviceSize                  imageMipTailSize;
    VkDeviceSize                  imageMipTailOffset;
    VkDeviceSize                  imageMipTailStride;
}
struct VkSparseMemoryBind {
    VkDeviceSize            resourceOffset;
    VkDeviceSize            size;
    VkDeviceMemory          memory;
    VkDeviceSize            memoryOffset;
    VkSparseMemoryBindFlags flags;
}
struct VkSparseBufferMemoryBindInfo {
    VkBuffer                   buffer;
    uint32_t                   bindCount;
    const(VkSparseMemoryBind)* pBinds;
}
struct VkSparseImageOpaqueMemoryBindInfo {
    VkImage                    image;
    uint32_t                   bindCount;
    const(VkSparseMemoryBind)* pBinds;
}
struct VkImageSubresource {
    VkImageAspectFlags aspectMask;
    uint32_t           mipLevel;
    uint32_t           arrayLayer;
}
struct VkOffset3D {
    int32_t x;
    int32_t y;
    int32_t z;
}
struct VkSparseImageMemoryBind {
    VkImageSubresource      subresource;
    VkOffset3D              offset;
    VkExtent3D              extent;
    VkDeviceMemory          memory;
    VkDeviceSize            memoryOffset;
    VkSparseMemoryBindFlags flags;
}
struct VkSparseImageMemoryBindInfo {
    VkImage                         image;
    uint32_t                        bindCount;
    const(VkSparseImageMemoryBind)* pBinds;
}
struct VkBindSparseInfo {
    VkStructureType                           sType;
    const(void)*                              pNext;
    uint32_t                                  waitSemaphoreCount;
    const(VkSemaphore)*                       pWaitSemaphores;
    uint32_t                                  bufferBindCount;
    const(VkSparseBufferMemoryBindInfo)*      pBufferBinds;
    uint32_t                                  imageOpaqueBindCount;
    const(VkSparseImageOpaqueMemoryBindInfo)* pImageOpaqueBinds;
    uint32_t                                  imageBindCount;
    const(VkSparseImageMemoryBindInfo)*       pImageBinds;
    uint32_t                                  signalSemaphoreCount;
    const(VkSemaphore)*                       pSignalSemaphores;
}
struct VkFenceCreateInfo {
    VkStructureType    sType;
    const(void)*       pNext;
    VkFenceCreateFlags flags;
}
struct VkSemaphoreCreateInfo {
    VkStructureType        sType;
    const(void)*           pNext;
    VkSemaphoreCreateFlags flags;
}
struct VkEventCreateInfo {
    VkStructureType    sType;
    const(void)*       pNext;
    VkEventCreateFlags flags;
}
struct VkQueryPoolCreateInfo {
    VkStructureType               sType;
    const(void)*                  pNext;
    VkQueryPoolCreateFlags        flags;
    VkQueryType                   queryType;
    uint32_t                      queryCount;
    VkQueryPipelineStatisticFlags pipelineStatistics;
}
struct VkBufferCreateInfo {
    VkStructureType     sType;
    const(void)*        pNext;
    VkBufferCreateFlags flags;
    VkDeviceSize        size;
    VkBufferUsageFlags  usage;
    VkSharingMode       sharingMode;
    uint32_t            queueFamilyIndexCount;
    const(uint32_t)*    pQueueFamilyIndices;
}
struct VkBufferViewCreateInfo {
    VkStructureType         sType;
    const(void)*            pNext;
    VkBufferViewCreateFlags flags;
    VkBuffer                buffer;
    VkFormat                format;
    VkDeviceSize            offset;
    VkDeviceSize            range;
}
struct VkImageCreateInfo {
    VkStructureType       sType;
    const(void)*          pNext;
    VkImageCreateFlags    flags;
    VkImageType           imageType;
    VkFormat              format;
    VkExtent3D            extent;
    uint32_t              mipLevels;
    uint32_t              arrayLayers;
    VkSampleCountFlagBits samples;
    VkImageTiling         tiling;
    VkImageUsageFlags     usage;
    VkSharingMode         sharingMode;
    uint32_t              queueFamilyIndexCount;
    const(uint32_t)*      pQueueFamilyIndices;
    VkImageLayout         initialLayout;
}
struct VkSubresourceLayout {
    VkDeviceSize offset;
    VkDeviceSize size;
    VkDeviceSize rowPitch;
    VkDeviceSize arrayPitch;
    VkDeviceSize depthPitch;
}
struct VkComponentMapping {
    VkComponentSwizzle r;
    VkComponentSwizzle g;
    VkComponentSwizzle b;
    VkComponentSwizzle a;
}
struct VkImageSubresourceRange {
    VkImageAspectFlags aspectMask;
    uint32_t           baseMipLevel;
    uint32_t           levelCount;
    uint32_t           baseArrayLayer;
    uint32_t           layerCount;
}
struct VkImageViewCreateInfo {
    VkStructureType         sType;
    const(void)*            pNext;
    VkImageViewCreateFlags  flags;
    VkImage                 image;
    VkImageViewType         viewType;
    VkFormat                format;
    VkComponentMapping      components;
    VkImageSubresourceRange subresourceRange;
}
struct VkShaderModuleCreateInfo {
    VkStructureType           sType;
    const(void)*              pNext;
    VkShaderModuleCreateFlags flags;
    size_t                    codeSize;
    const(uint32_t)*          pCode;
}
struct VkPipelineCacheCreateInfo {
    VkStructureType            sType;
    const(void)*               pNext;
    VkPipelineCacheCreateFlags flags;
    size_t                     initialDataSize;
    const(void)*               pInitialData;
}
struct VkSpecializationMapEntry {
    uint32_t constantID;
    uint32_t offset;
    size_t   size;
}
struct VkSpecializationInfo {
    uint32_t                         mapEntryCount;
    const(VkSpecializationMapEntry)* pMapEntries;
    size_t                           dataSize;
    const(void)*                     pData;
}
struct VkPipelineShaderStageCreateInfo {
    VkStructureType                  sType;
    const(void)*                     pNext;
    VkPipelineShaderStageCreateFlags flags;
    VkShaderStageFlagBits            stage;
    VkShaderModule                   module_;
    const(char)*                     pName;
    const(VkSpecializationInfo)*     pSpecializationInfo;
}
struct VkVertexInputBindingDescription {
    uint32_t          binding;
    uint32_t          stride;
    VkVertexInputRate inputRate;
}
struct VkVertexInputAttributeDescription {
    uint32_t location;
    uint32_t binding;
    VkFormat format;
    uint32_t offset;
}
struct VkPipelineVertexInputStateCreateInfo {
    VkStructureType                           sType;
    const(void)*                              pNext;
    VkPipelineVertexInputStateCreateFlags     flags;
    uint32_t                                  vertexBindingDescriptionCount;
    const(VkVertexInputBindingDescription)*   pVertexBindingDescriptions;
    uint32_t                                  vertexAttributeDescriptionCount;
    const(VkVertexInputAttributeDescription)* pVertexAttributeDescriptions;
}
struct VkPipelineInputAssemblyStateCreateInfo {
    VkStructureType                         sType;
    const(void)*                            pNext;
    VkPipelineInputAssemblyStateCreateFlags flags;
    VkPrimitiveTopology                     topology;
    VkBool32                                primitiveRestartEnable;
}
struct VkPipelineTessellationStateCreateInfo {
    VkStructureType                        sType;
    const(void)*                           pNext;
    VkPipelineTessellationStateCreateFlags flags;
    uint32_t                               patchControlPoints;
}
struct VkViewport {
    float x;
    float y;
    float width;
    float height;
    float minDepth;
    float maxDepth;
}
struct VkOffset2D {
    int32_t x;
    int32_t y;
}
struct VkExtent2D {
    uint32_t width;
    uint32_t height;
}
struct VkRect2D {
    VkOffset2D offset;
    VkExtent2D extent;
}
struct VkPipelineViewportStateCreateInfo {
    VkStructureType                    sType;
    const(void)*                       pNext;
    VkPipelineViewportStateCreateFlags flags;
    uint32_t                           viewportCount;
    const(VkViewport)*                 pViewports;
    uint32_t                           scissorCount;
    const(VkRect2D)*                   pScissors;
}
struct VkPipelineRasterizationStateCreateInfo {
    VkStructureType                         sType;
    const(void)*                            pNext;
    VkPipelineRasterizationStateCreateFlags flags;
    VkBool32                                depthClampEnable;
    VkBool32                                rasterizerDiscardEnable;
    VkPolygonMode                           polygonMode;
    VkCullModeFlags                         cullMode;
    VkFrontFace                             frontFace;
    VkBool32                                depthBiasEnable;
    float                                   depthBiasConstantFactor;
    float                                   depthBiasClamp;
    float                                   depthBiasSlopeFactor;
    float                                   lineWidth;
}
struct VkPipelineMultisampleStateCreateInfo {
    VkStructureType                       sType;
    const(void)*                          pNext;
    VkPipelineMultisampleStateCreateFlags flags;
    VkSampleCountFlagBits                 rasterizationSamples;
    VkBool32                              sampleShadingEnable;
    float                                 minSampleShading;
    const(VkSampleMask)*                  pSampleMask;
    VkBool32                              alphaToCoverageEnable;
    VkBool32                              alphaToOneEnable;
}
struct VkStencilOpState {
    VkStencilOp failOp;
    VkStencilOp passOp;
    VkStencilOp depthFailOp;
    VkCompareOp compareOp;
    uint32_t    compareMask;
    uint32_t    writeMask;
    uint32_t    reference;
}
struct VkPipelineDepthStencilStateCreateInfo {
    VkStructureType                        sType;
    const(void)*                           pNext;
    VkPipelineDepthStencilStateCreateFlags flags;
    VkBool32                               depthTestEnable;
    VkBool32                               depthWriteEnable;
    VkCompareOp                            depthCompareOp;
    VkBool32                               depthBoundsTestEnable;
    VkBool32                               stencilTestEnable;
    VkStencilOpState                       front;
    VkStencilOpState                       back;
    float                                  minDepthBounds;
    float                                  maxDepthBounds;
}
struct VkPipelineColorBlendAttachmentState {
    VkBool32              blendEnable;
    VkBlendFactor         srcColorBlendFactor;
    VkBlendFactor         dstColorBlendFactor;
    VkBlendOp             colorBlendOp;
    VkBlendFactor         srcAlphaBlendFactor;
    VkBlendFactor         dstAlphaBlendFactor;
    VkBlendOp             alphaBlendOp;
    VkColorComponentFlags colorWriteMask;
}
struct VkPipelineColorBlendStateCreateInfo {
    VkStructureType                             sType;
    const(void)*                                pNext;
    VkPipelineColorBlendStateCreateFlags        flags;
    VkBool32                                    logicOpEnable;
    VkLogicOp                                   logicOp;
    uint32_t                                    attachmentCount;
    const(VkPipelineColorBlendAttachmentState)* pAttachments;
    float[4]                                    blendConstants;
}
struct VkPipelineDynamicStateCreateInfo {
    VkStructureType                   sType;
    const(void)*                      pNext;
    VkPipelineDynamicStateCreateFlags flags;
    uint32_t                          dynamicStateCount;
    const(VkDynamicState)*            pDynamicStates;
}
struct VkGraphicsPipelineCreateInfo {
    VkStructureType                                sType;
    const(void)*                                   pNext;
    VkPipelineCreateFlags                          flags;
    uint32_t                                       stageCount;
    const(VkPipelineShaderStageCreateInfo)*        pStages;
    const(VkPipelineVertexInputStateCreateInfo)*   pVertexInputState;
    const(VkPipelineInputAssemblyStateCreateInfo)* pInputAssemblyState;
    const(VkPipelineTessellationStateCreateInfo)*  pTessellationState;
    const(VkPipelineViewportStateCreateInfo)*      pViewportState;
    const(VkPipelineRasterizationStateCreateInfo)* pRasterizationState;
    const(VkPipelineMultisampleStateCreateInfo)*   pMultisampleState;
    const(VkPipelineDepthStencilStateCreateInfo)*  pDepthStencilState;
    const(VkPipelineColorBlendStateCreateInfo)*    pColorBlendState;
    const(VkPipelineDynamicStateCreateInfo)*       pDynamicState;
    VkPipelineLayout                               layout;
    VkRenderPass                                   renderPass;
    uint32_t                                       subpass;
    VkPipeline                                     basePipelineHandle;
    int32_t                                        basePipelineIndex;
}
struct VkComputePipelineCreateInfo {
    VkStructureType                 sType;
    const(void)*                    pNext;
    VkPipelineCreateFlags           flags;
    VkPipelineShaderStageCreateInfo stage;
    VkPipelineLayout                layout;
    VkPipeline                      basePipelineHandle;
    int32_t                         basePipelineIndex;
}
struct VkPushConstantRange {
    VkShaderStageFlags stageFlags;
    uint32_t           offset;
    uint32_t           size;
}
struct VkPipelineLayoutCreateInfo {
    VkStructureType               sType;
    const(void)*                  pNext;
    VkPipelineLayoutCreateFlags   flags;
    uint32_t                      setLayoutCount;
    const(VkDescriptorSetLayout)* pSetLayouts;
    uint32_t                      pushConstantRangeCount;
    const(VkPushConstantRange)*   pPushConstantRanges;
}
struct VkSamplerCreateInfo {
    VkStructureType      sType;
    const(void)*         pNext;
    VkSamplerCreateFlags flags;
    VkFilter             magFilter;
    VkFilter             minFilter;
    VkSamplerMipmapMode  mipmapMode;
    VkSamplerAddressMode addressModeU;
    VkSamplerAddressMode addressModeV;
    VkSamplerAddressMode addressModeW;
    float                mipLodBias;
    VkBool32             anisotropyEnable;
    float                maxAnisotropy;
    VkBool32             compareEnable;
    VkCompareOp          compareOp;
    float                minLod;
    float                maxLod;
    VkBorderColor        borderColor;
    VkBool32             unnormalizedCoordinates;
}
struct VkDescriptorSetLayoutBinding {
    uint32_t           binding;
    VkDescriptorType   descriptorType;
    uint32_t           descriptorCount;
    VkShaderStageFlags stageFlags;
    const(VkSampler)*  pImmutableSamplers;
}
struct VkDescriptorSetLayoutCreateInfo {
    VkStructureType                      sType;
    const(void)*                         pNext;
    VkDescriptorSetLayoutCreateFlags     flags;
    uint32_t                             bindingCount;
    const(VkDescriptorSetLayoutBinding)* pBindings;
}
struct VkDescriptorPoolSize {
    VkDescriptorType type;
    uint32_t         descriptorCount;
}
struct VkDescriptorPoolCreateInfo {
    VkStructureType              sType;
    const(void)*                 pNext;
    VkDescriptorPoolCreateFlags  flags;
    uint32_t                     maxSets;
    uint32_t                     poolSizeCount;
    const(VkDescriptorPoolSize)* pPoolSizes;
}
struct VkDescriptorSetAllocateInfo {
    VkStructureType               sType;
    const(void)*                  pNext;
    VkDescriptorPool              descriptorPool;
    uint32_t                      descriptorSetCount;
    const(VkDescriptorSetLayout)* pSetLayouts;
}
struct VkDescriptorImageInfo {
    VkSampler     sampler;
    VkImageView   imageView;
    VkImageLayout imageLayout;
}
struct VkDescriptorBufferInfo {
    VkBuffer     buffer;
    VkDeviceSize offset;
    VkDeviceSize range;
}
struct VkWriteDescriptorSet {
    VkStructureType                sType;
    const(void)*                   pNext;
    VkDescriptorSet                dstSet;
    uint32_t                       dstBinding;
    uint32_t                       dstArrayElement;
    uint32_t                       descriptorCount;
    VkDescriptorType               descriptorType;
    const(VkDescriptorImageInfo)*  pImageInfo;
    const(VkDescriptorBufferInfo)* pBufferInfo;
    const(VkBufferView)*           pTexelBufferView;
}
struct VkCopyDescriptorSet {
    VkStructureType sType;
    const(void)*    pNext;
    VkDescriptorSet srcSet;
    uint32_t        srcBinding;
    uint32_t        srcArrayElement;
    VkDescriptorSet dstSet;
    uint32_t        dstBinding;
    uint32_t        dstArrayElement;
    uint32_t        descriptorCount;
}
struct VkFramebufferCreateInfo {
    VkStructureType          sType;
    const(void)*             pNext;
    VkFramebufferCreateFlags flags;
    VkRenderPass             renderPass;
    uint32_t                 attachmentCount;
    const(VkImageView)*      pAttachments;
    uint32_t                 width;
    uint32_t                 height;
    uint32_t                 layers;
}
struct VkAttachmentDescription {
    VkAttachmentDescriptionFlags flags;
    VkFormat                     format;
    VkSampleCountFlagBits        samples;
    VkAttachmentLoadOp           loadOp;
    VkAttachmentStoreOp          storeOp;
    VkAttachmentLoadOp           stencilLoadOp;
    VkAttachmentStoreOp          stencilStoreOp;
    VkImageLayout                initialLayout;
    VkImageLayout                finalLayout;
}
struct VkAttachmentReference {
    uint32_t      attachment;
    VkImageLayout layout;
}
struct VkSubpassDescription {
    VkSubpassDescriptionFlags     flags;
    VkPipelineBindPoint           pipelineBindPoint;
    uint32_t                      inputAttachmentCount;
    const(VkAttachmentReference)* pInputAttachments;
    uint32_t                      colorAttachmentCount;
    const(VkAttachmentReference)* pColorAttachments;
    const(VkAttachmentReference)* pResolveAttachments;
    const(VkAttachmentReference)* pDepthStencilAttachment;
    uint32_t                      preserveAttachmentCount;
    const(uint32_t)*              pPreserveAttachments;
}
struct VkSubpassDependency {
    uint32_t             srcSubpass;
    uint32_t             dstSubpass;
    VkPipelineStageFlags srcStageMask;
    VkPipelineStageFlags dstStageMask;
    VkAccessFlags        srcAccessMask;
    VkAccessFlags        dstAccessMask;
    VkDependencyFlags    dependencyFlags;
}
struct VkRenderPassCreateInfo {
    VkStructureType                 sType;
    const(void)*                    pNext;
    VkRenderPassCreateFlags         flags;
    uint32_t                        attachmentCount;
    const(VkAttachmentDescription)* pAttachments;
    uint32_t                        subpassCount;
    const(VkSubpassDescription)*    pSubpasses;
    uint32_t                        dependencyCount;
    const(VkSubpassDependency)*     pDependencies;
}
struct VkCommandPoolCreateInfo {
    VkStructureType          sType;
    const(void)*             pNext;
    VkCommandPoolCreateFlags flags;
    uint32_t                 queueFamilyIndex;
}
struct VkCommandBufferAllocateInfo {
    VkStructureType      sType;
    const(void)*         pNext;
    VkCommandPool        commandPool;
    VkCommandBufferLevel level;
    uint32_t             commandBufferCount;
}
struct VkCommandBufferInheritanceInfo {
    VkStructureType               sType;
    const(void)*                  pNext;
    VkRenderPass                  renderPass;
    uint32_t                      subpass;
    VkFramebuffer                 framebuffer;
    VkBool32                      occlusionQueryEnable;
    VkQueryControlFlags           queryFlags;
    VkQueryPipelineStatisticFlags pipelineStatistics;
}
struct VkCommandBufferBeginInfo {
    VkStructureType                        sType;
    const(void)*                           pNext;
    VkCommandBufferUsageFlags              flags;
    const(VkCommandBufferInheritanceInfo)* pInheritanceInfo;
}
struct VkBufferCopy {
    VkDeviceSize srcOffset;
    VkDeviceSize dstOffset;
    VkDeviceSize size;
}
struct VkImageSubresourceLayers {
    VkImageAspectFlags aspectMask;
    uint32_t           mipLevel;
    uint32_t           baseArrayLayer;
    uint32_t           layerCount;
}
struct VkImageCopy {
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D               srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D               dstOffset;
    VkExtent3D               extent;
}
struct VkImageBlit {
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D[2]            srcOffsets;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D[2]            dstOffsets;
}
struct VkBufferImageCopy {
    VkDeviceSize             bufferOffset;
    uint32_t                 bufferRowLength;
    uint32_t                 bufferImageHeight;
    VkImageSubresourceLayers imageSubresource;
    VkOffset3D               imageOffset;
    VkExtent3D               imageExtent;
}
union VkClearColorValue {
    float[4]    float32;
    int32_t[4]  int32;
    uint32_t[4] uint32;
}
struct VkClearDepthStencilValue {
    float    depth;
    uint32_t stencil;
}
union VkClearValue {
    VkClearColorValue        color;
    VkClearDepthStencilValue depthStencil;
}
struct VkClearAttachment {
    VkImageAspectFlags aspectMask;
    uint32_t           colorAttachment;
    VkClearValue       clearValue;
}
struct VkClearRect {
    VkRect2D rect;
    uint32_t baseArrayLayer;
    uint32_t layerCount;
}
struct VkImageResolve {
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D               srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D               dstOffset;
    VkExtent3D               extent;
}
struct VkMemoryBarrier {
    VkStructureType sType;
    const(void)*    pNext;
    VkAccessFlags   srcAccessMask;
    VkAccessFlags   dstAccessMask;
}
struct VkBufferMemoryBarrier {
    VkStructureType sType;
    const(void)*    pNext;
    VkAccessFlags   srcAccessMask;
    VkAccessFlags   dstAccessMask;
    uint32_t        srcQueueFamilyIndex;
    uint32_t        dstQueueFamilyIndex;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkDeviceSize    size;
}
struct VkImageMemoryBarrier {
    VkStructureType         sType;
    const(void)*            pNext;
    VkAccessFlags           srcAccessMask;
    VkAccessFlags           dstAccessMask;
    VkImageLayout           oldLayout;
    VkImageLayout           newLayout;
    uint32_t                srcQueueFamilyIndex;
    uint32_t                dstQueueFamilyIndex;
    VkImage                 image;
    VkImageSubresourceRange subresourceRange;
}
struct VkRenderPassBeginInfo {
    VkStructureType      sType;
    const(void)*         pNext;
    VkRenderPass         renderPass;
    VkFramebuffer        framebuffer;
    VkRect2D             renderArea;
    uint32_t             clearValueCount;
    const(VkClearValue)* pClearValues;
}
struct VkDispatchIndirectCommand {
    uint32_t x;
    uint32_t y;
    uint32_t z;
}
struct VkDrawIndexedIndirectCommand {
    uint32_t indexCount;
    uint32_t instanceCount;
    uint32_t firstIndex;
    int32_t  vertexOffset;
    uint32_t firstInstance;
}
struct VkDrawIndirectCommand {
    uint32_t vertexCount;
    uint32_t instanceCount;
    uint32_t firstVertex;
    uint32_t firstInstance;
}

// VK_KHR_surface
struct VkSurfaceCapabilitiesKHR {
    uint32_t                      minImageCount;
    uint32_t                      maxImageCount;
    VkExtent2D                    currentExtent;
    VkExtent2D                    minImageExtent;
    VkExtent2D                    maxImageExtent;
    uint32_t                      maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR    supportedTransforms;
    VkSurfaceTransformFlagBitsKHR currentTransform;
    VkCompositeAlphaFlagsKHR      supportedCompositeAlpha;
    VkImageUsageFlags             supportedUsageFlags;
}
struct VkSurfaceFormatKHR {
    VkFormat        format;
    VkColorSpaceKHR colorSpace;
}

// VK_KHR_swapchain
struct VkSwapchainCreateInfoKHR {
    VkStructureType               sType;
    const(void)*                  pNext;
    VkSwapchainCreateFlagsKHR     flags;
    VkSurfaceKHR                  surface;
    uint32_t                      minImageCount;
    VkFormat                      imageFormat;
    VkColorSpaceKHR               imageColorSpace;
    VkExtent2D                    imageExtent;
    uint32_t                      imageArrayLayers;
    VkImageUsageFlags             imageUsage;
    VkSharingMode                 imageSharingMode;
    uint32_t                      queueFamilyIndexCount;
    const(uint32_t)*              pQueueFamilyIndices;
    VkSurfaceTransformFlagBitsKHR preTransform;
    VkCompositeAlphaFlagBitsKHR   compositeAlpha;
    VkPresentModeKHR              presentMode;
    VkBool32                      clipped;
    VkSwapchainKHR                oldSwapchain;
}
struct VkPresentInfoKHR {
    VkStructureType        sType;
    const(void)*           pNext;
    uint32_t               waitSemaphoreCount;
    const(VkSemaphore)*    pWaitSemaphores;
    uint32_t               swapchainCount;
    const(VkSwapchainKHR)* pSwapchains;
    const(uint32_t)*       pImageIndices;
    VkResult*              pResults;
}

// VK_KHR_display
struct VkDisplayPropertiesKHR {
    VkDisplayKHR               display;
    const(char)*               displayName;
    VkExtent2D                 physicalDimensions;
    VkExtent2D                 physicalResolution;
    VkSurfaceTransformFlagsKHR supportedTransforms;
    VkBool32                   planeReorderPossible;
    VkBool32                   persistentContent;
}
struct VkDisplayModeParametersKHR {
    VkExtent2D visibleRegion;
    uint32_t   refreshRate;
}
struct VkDisplayModePropertiesKHR {
    VkDisplayModeKHR           displayMode;
    VkDisplayModeParametersKHR parameters;
}
struct VkDisplayModeCreateInfoKHR {
    VkStructureType             sType;
    const(void)*                pNext;
    VkDisplayModeCreateFlagsKHR flags;
    VkDisplayModeParametersKHR  parameters;
}
struct VkDisplayPlaneCapabilitiesKHR {
    VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
    VkOffset2D                  minSrcPosition;
    VkOffset2D                  maxSrcPosition;
    VkExtent2D                  minSrcExtent;
    VkExtent2D                  maxSrcExtent;
    VkOffset2D                  minDstPosition;
    VkOffset2D                  maxDstPosition;
    VkExtent2D                  minDstExtent;
    VkExtent2D                  maxDstExtent;
}
struct VkDisplayPlanePropertiesKHR {
    VkDisplayKHR currentDisplay;
    uint32_t     currentStackIndex;
}
struct VkDisplaySurfaceCreateInfoKHR {
    VkStructureType                sType;
    const(void)*                   pNext;
    VkDisplaySurfaceCreateFlagsKHR flags;
    VkDisplayModeKHR               displayMode;
    uint32_t                       planeIndex;
    uint32_t                       planeStackIndex;
    VkSurfaceTransformFlagBitsKHR  transform;
    float                          globalAlpha;
    VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
    VkExtent2D                     imageExtent;
}

// VK_KHR_wayland_surface
version(linux) {
    struct VkWaylandSurfaceCreateInfoKHR {
        VkStructureType                sType;
        const(void)*                   pNext;
        VkWaylandSurfaceCreateFlagsKHR flags;
        wl_display*                    display;
        wl_surface*                    surface;
    }
}

// Command pointer aliases

extern(C) nothrow @nogc {
    // VK_VERSION_1_0
    alias PFN_vkCreateInstance = VkResult function (
        const(VkInstanceCreateInfo)*  pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkInstance*                   pInstance,
    );
    alias PFN_vkDestroyInstance = void function (
        VkInstance                    instance,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkEnumeratePhysicalDevices = VkResult function (
        VkInstance        instance,
        uint32_t*         pPhysicalDeviceCount,
        VkPhysicalDevice* pPhysicalDevices,
    );
    alias PFN_vkGetPhysicalDeviceFeatures = void function (
        VkPhysicalDevice          physicalDevice,
        VkPhysicalDeviceFeatures* pFeatures,
    );
    alias PFN_vkGetPhysicalDeviceFormatProperties = void function (
        VkPhysicalDevice    physicalDevice,
        VkFormat            format,
        VkFormatProperties* pFormatProperties,
    );
    alias PFN_vkGetPhysicalDeviceImageFormatProperties = VkResult function (
        VkPhysicalDevice         physicalDevice,
        VkFormat                 format,
        VkImageType              type,
        VkImageTiling            tiling,
        VkImageUsageFlags        usage,
        VkImageCreateFlags       flags,
        VkImageFormatProperties* pImageFormatProperties,
    );
    alias PFN_vkGetPhysicalDeviceProperties = void function (
        VkPhysicalDevice            physicalDevice,
        VkPhysicalDeviceProperties* pProperties,
    );
    alias PFN_vkGetPhysicalDeviceQueueFamilyProperties = void function (
        VkPhysicalDevice         physicalDevice,
        uint32_t*                pQueueFamilyPropertyCount,
        VkQueueFamilyProperties* pQueueFamilyProperties,
    );
    alias PFN_vkGetPhysicalDeviceMemoryProperties = void function (
        VkPhysicalDevice                  physicalDevice,
        VkPhysicalDeviceMemoryProperties* pMemoryProperties,
    );
    alias PFN_vkGetInstanceProcAddr = PFN_vkVoidFunction function (
        VkInstance   instance,
        const(char)* pName,
    );
    alias PFN_vkGetDeviceProcAddr = PFN_vkVoidFunction function (
        VkDevice     device,
        const(char)* pName,
    );
    alias PFN_vkCreateDevice = VkResult function (
        VkPhysicalDevice              physicalDevice,
        const(VkDeviceCreateInfo)*    pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkDevice*                     pDevice,
    );
    alias PFN_vkDestroyDevice = void function (
        VkDevice                      device,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkEnumerateInstanceExtensionProperties = VkResult function (
        const(char)*           pLayerName,
        uint32_t*              pPropertyCount,
        VkExtensionProperties* pProperties,
    );
    alias PFN_vkEnumerateDeviceExtensionProperties = VkResult function (
        VkPhysicalDevice       physicalDevice,
        const(char)*           pLayerName,
        uint32_t*              pPropertyCount,
        VkExtensionProperties* pProperties,
    );
    alias PFN_vkEnumerateInstanceLayerProperties = VkResult function (
        uint32_t*          pPropertyCount,
        VkLayerProperties* pProperties,
    );
    alias PFN_vkEnumerateDeviceLayerProperties = VkResult function (
        VkPhysicalDevice   physicalDevice,
        uint32_t*          pPropertyCount,
        VkLayerProperties* pProperties,
    );
    alias PFN_vkGetDeviceQueue = void function (
        VkDevice device,
        uint32_t queueFamilyIndex,
        uint32_t queueIndex,
        VkQueue* pQueue,
    );
    alias PFN_vkQueueSubmit = VkResult function (
        VkQueue              queue,
        uint32_t             submitCount,
        const(VkSubmitInfo)* pSubmits,
        VkFence              fence,
    );
    alias PFN_vkQueueWaitIdle = VkResult function (VkQueue queue);
    alias PFN_vkDeviceWaitIdle = VkResult function (VkDevice device);
    alias PFN_vkAllocateMemory = VkResult function (
        VkDevice                      device,
        const(VkMemoryAllocateInfo)*  pAllocateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkDeviceMemory*               pMemory,
    );
    alias PFN_vkFreeMemory = void function (
        VkDevice                      device,
        VkDeviceMemory                memory,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkMapMemory = VkResult function (
        VkDevice         device,
        VkDeviceMemory   memory,
        VkDeviceSize     offset,
        VkDeviceSize     size,
        VkMemoryMapFlags flags,
        void**           ppData,
    );
    alias PFN_vkUnmapMemory = void function (
        VkDevice       device,
        VkDeviceMemory memory,
    );
    alias PFN_vkFlushMappedMemoryRanges = VkResult function (
        VkDevice                    device,
        uint32_t                    memoryRangeCount,
        const(VkMappedMemoryRange)* pMemoryRanges,
    );
    alias PFN_vkInvalidateMappedMemoryRanges = VkResult function (
        VkDevice                    device,
        uint32_t                    memoryRangeCount,
        const(VkMappedMemoryRange)* pMemoryRanges,
    );
    alias PFN_vkGetDeviceMemoryCommitment = void function (
        VkDevice       device,
        VkDeviceMemory memory,
        VkDeviceSize*  pCommittedMemoryInBytes,
    );
    alias PFN_vkBindBufferMemory = VkResult function (
        VkDevice       device,
        VkBuffer       buffer,
        VkDeviceMemory memory,
        VkDeviceSize   memoryOffset,
    );
    alias PFN_vkBindImageMemory = VkResult function (
        VkDevice       device,
        VkImage        image,
        VkDeviceMemory memory,
        VkDeviceSize   memoryOffset,
    );
    alias PFN_vkGetBufferMemoryRequirements = void function (
        VkDevice              device,
        VkBuffer              buffer,
        VkMemoryRequirements* pMemoryRequirements,
    );
    alias PFN_vkGetImageMemoryRequirements = void function (
        VkDevice              device,
        VkImage               image,
        VkMemoryRequirements* pMemoryRequirements,
    );
    alias PFN_vkGetImageSparseMemoryRequirements = void function (
        VkDevice                         device,
        VkImage                          image,
        uint32_t*                        pSparseMemoryRequirementCount,
        VkSparseImageMemoryRequirements* pSparseMemoryRequirements,
    );
    alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties = void function (
        VkPhysicalDevice               physicalDevice,
        VkFormat                       format,
        VkImageType                    type,
        VkSampleCountFlagBits          samples,
        VkImageUsageFlags              usage,
        VkImageTiling                  tiling,
        uint32_t*                      pPropertyCount,
        VkSparseImageFormatProperties* pProperties,
    );
    alias PFN_vkQueueBindSparse = VkResult function (
        VkQueue                  queue,
        uint32_t                 bindInfoCount,
        const(VkBindSparseInfo)* pBindInfo,
        VkFence                  fence,
    );
    alias PFN_vkCreateFence = VkResult function (
        VkDevice                      device,
        const(VkFenceCreateInfo)*     pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkFence*                      pFence,
    );
    alias PFN_vkDestroyFence = void function (
        VkDevice                      device,
        VkFence                       fence,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkResetFences = VkResult function (
        VkDevice        device,
        uint32_t        fenceCount,
        const(VkFence)* pFences,
    );
    alias PFN_vkGetFenceStatus = VkResult function (
        VkDevice device,
        VkFence  fence,
    );
    alias PFN_vkWaitForFences = VkResult function (
        VkDevice        device,
        uint32_t        fenceCount,
        const(VkFence)* pFences,
        VkBool32        waitAll,
        uint64_t        timeout,
    );
    alias PFN_vkCreateSemaphore = VkResult function (
        VkDevice                      device,
        const(VkSemaphoreCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkSemaphore*                  pSemaphore,
    );
    alias PFN_vkDestroySemaphore = void function (
        VkDevice                      device,
        VkSemaphore                   semaphore,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateEvent = VkResult function (
        VkDevice                      device,
        const(VkEventCreateInfo)*     pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkEvent*                      pEvent,
    );
    alias PFN_vkDestroyEvent = void function (
        VkDevice                      device,
        VkEvent                       event,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkGetEventStatus = VkResult function (
        VkDevice device,
        VkEvent  event,
    );
    alias PFN_vkSetEvent = VkResult function (
        VkDevice device,
        VkEvent  event,
    );
    alias PFN_vkResetEvent = VkResult function (
        VkDevice device,
        VkEvent  event,
    );
    alias PFN_vkCreateQueryPool = VkResult function (
        VkDevice                      device,
        const(VkQueryPoolCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkQueryPool*                  pQueryPool,
    );
    alias PFN_vkDestroyQueryPool = void function (
        VkDevice                      device,
        VkQueryPool                   queryPool,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkGetQueryPoolResults = VkResult function (
        VkDevice           device,
        VkQueryPool        queryPool,
        uint32_t           firstQuery,
        uint32_t           queryCount,
        size_t             dataSize,
        void*              pData,
        VkDeviceSize       stride,
        VkQueryResultFlags flags,
    );
    alias PFN_vkCreateBuffer = VkResult function (
        VkDevice                      device,
        const(VkBufferCreateInfo)*    pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkBuffer*                     pBuffer,
    );
    alias PFN_vkDestroyBuffer = void function (
        VkDevice                      device,
        VkBuffer                      buffer,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateBufferView = VkResult function (
        VkDevice                       device,
        const(VkBufferViewCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*  pAllocator,
        VkBufferView*                  pView,
    );
    alias PFN_vkDestroyBufferView = void function (
        VkDevice                      device,
        VkBufferView                  bufferView,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateImage = VkResult function (
        VkDevice                      device,
        const(VkImageCreateInfo)*     pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkImage*                      pImage,
    );
    alias PFN_vkDestroyImage = void function (
        VkDevice                      device,
        VkImage                       image,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkGetImageSubresourceLayout = void function (
        VkDevice                   device,
        VkImage                    image,
        const(VkImageSubresource)* pSubresource,
        VkSubresourceLayout*       pLayout,
    );
    alias PFN_vkCreateImageView = VkResult function (
        VkDevice                      device,
        const(VkImageViewCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkImageView*                  pView,
    );
    alias PFN_vkDestroyImageView = void function (
        VkDevice                      device,
        VkImageView                   imageView,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateShaderModule = VkResult function (
        VkDevice                         device,
        const(VkShaderModuleCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*    pAllocator,
        VkShaderModule*                  pShaderModule,
    );
    alias PFN_vkDestroyShaderModule = void function (
        VkDevice                      device,
        VkShaderModule                shaderModule,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreatePipelineCache = VkResult function (
        VkDevice                          device,
        const(VkPipelineCacheCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*     pAllocator,
        VkPipelineCache*                  pPipelineCache,
    );
    alias PFN_vkDestroyPipelineCache = void function (
        VkDevice                      device,
        VkPipelineCache               pipelineCache,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkGetPipelineCacheData = VkResult function (
        VkDevice        device,
        VkPipelineCache pipelineCache,
        size_t*         pDataSize,
        void*           pData,
    );
    alias PFN_vkMergePipelineCaches = VkResult function (
        VkDevice                device,
        VkPipelineCache         dstCache,
        uint32_t                srcCacheCount,
        const(VkPipelineCache)* pSrcCaches,
    );
    alias PFN_vkCreateGraphicsPipelines = VkResult function (
        VkDevice                             device,
        VkPipelineCache                      pipelineCache,
        uint32_t                             createInfoCount,
        const(VkGraphicsPipelineCreateInfo)* pCreateInfos,
        const(VkAllocationCallbacks)*        pAllocator,
        VkPipeline*                          pPipelines,
    );
    alias PFN_vkCreateComputePipelines = VkResult function (
        VkDevice                            device,
        VkPipelineCache                     pipelineCache,
        uint32_t                            createInfoCount,
        const(VkComputePipelineCreateInfo)* pCreateInfos,
        const(VkAllocationCallbacks)*       pAllocator,
        VkPipeline*                         pPipelines,
    );
    alias PFN_vkDestroyPipeline = void function (
        VkDevice                      device,
        VkPipeline                    pipeline,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreatePipelineLayout = VkResult function (
        VkDevice                           device,
        const(VkPipelineLayoutCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*      pAllocator,
        VkPipelineLayout*                  pPipelineLayout,
    );
    alias PFN_vkDestroyPipelineLayout = void function (
        VkDevice                      device,
        VkPipelineLayout              pipelineLayout,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateSampler = VkResult function (
        VkDevice                      device,
        const(VkSamplerCreateInfo)*   pCreateInfo,
        const(VkAllocationCallbacks)* pAllocator,
        VkSampler*                    pSampler,
    );
    alias PFN_vkDestroySampler = void function (
        VkDevice                      device,
        VkSampler                     sampler,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateDescriptorSetLayout = VkResult function (
        VkDevice                                device,
        const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*           pAllocator,
        VkDescriptorSetLayout*                  pSetLayout,
    );
    alias PFN_vkDestroyDescriptorSetLayout = void function (
        VkDevice                      device,
        VkDescriptorSetLayout         descriptorSetLayout,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateDescriptorPool = VkResult function (
        VkDevice                           device,
        const(VkDescriptorPoolCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*      pAllocator,
        VkDescriptorPool*                  pDescriptorPool,
    );
    alias PFN_vkDestroyDescriptorPool = void function (
        VkDevice                      device,
        VkDescriptorPool              descriptorPool,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkResetDescriptorPool = VkResult function (
        VkDevice                   device,
        VkDescriptorPool           descriptorPool,
        VkDescriptorPoolResetFlags flags,
    );
    alias PFN_vkAllocateDescriptorSets = VkResult function (
        VkDevice                            device,
        const(VkDescriptorSetAllocateInfo)* pAllocateInfo,
        VkDescriptorSet*                    pDescriptorSets,
    );
    alias PFN_vkFreeDescriptorSets = VkResult function (
        VkDevice                device,
        VkDescriptorPool        descriptorPool,
        uint32_t                descriptorSetCount,
        const(VkDescriptorSet)* pDescriptorSets,
    );
    alias PFN_vkUpdateDescriptorSets = void function (
        VkDevice                     device,
        uint32_t                     descriptorWriteCount,
        const(VkWriteDescriptorSet)* pDescriptorWrites,
        uint32_t                     descriptorCopyCount,
        const(VkCopyDescriptorSet)*  pDescriptorCopies,
    );
    alias PFN_vkCreateFramebuffer = VkResult function (
        VkDevice                        device,
        const(VkFramebufferCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*   pAllocator,
        VkFramebuffer*                  pFramebuffer,
    );
    alias PFN_vkDestroyFramebuffer = void function (
        VkDevice                      device,
        VkFramebuffer                 framebuffer,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkCreateRenderPass = VkResult function (
        VkDevice                       device,
        const(VkRenderPassCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*  pAllocator,
        VkRenderPass*                  pRenderPass,
    );
    alias PFN_vkDestroyRenderPass = void function (
        VkDevice                      device,
        VkRenderPass                  renderPass,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkGetRenderAreaGranularity = void function (
        VkDevice     device,
        VkRenderPass renderPass,
        VkExtent2D*  pGranularity,
    );
    alias PFN_vkCreateCommandPool = VkResult function (
        VkDevice                        device,
        const(VkCommandPoolCreateInfo)* pCreateInfo,
        const(VkAllocationCallbacks)*   pAllocator,
        VkCommandPool*                  pCommandPool,
    );
    alias PFN_vkDestroyCommandPool = void function (
        VkDevice                      device,
        VkCommandPool                 commandPool,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkResetCommandPool = VkResult function (
        VkDevice                device,
        VkCommandPool           commandPool,
        VkCommandPoolResetFlags flags,
    );
    alias PFN_vkAllocateCommandBuffers = VkResult function (
        VkDevice                            device,
        const(VkCommandBufferAllocateInfo)* pAllocateInfo,
        VkCommandBuffer*                    pCommandBuffers,
    );
    alias PFN_vkFreeCommandBuffers = void function (
        VkDevice                device,
        VkCommandPool           commandPool,
        uint32_t                commandBufferCount,
        const(VkCommandBuffer)* pCommandBuffers,
    );
    alias PFN_vkBeginCommandBuffer = VkResult function (
        VkCommandBuffer                  commandBuffer,
        const(VkCommandBufferBeginInfo)* pBeginInfo,
    );
    alias PFN_vkEndCommandBuffer = VkResult function (VkCommandBuffer commandBuffer);
    alias PFN_vkResetCommandBuffer = VkResult function (
        VkCommandBuffer           commandBuffer,
        VkCommandBufferResetFlags flags,
    );
    alias PFN_vkCmdBindPipeline = void function (
        VkCommandBuffer     commandBuffer,
        VkPipelineBindPoint pipelineBindPoint,
        VkPipeline          pipeline,
    );
    alias PFN_vkCmdSetViewport = void function (
        VkCommandBuffer    commandBuffer,
        uint32_t           firstViewport,
        uint32_t           viewportCount,
        const(VkViewport)* pViewports,
    );
    alias PFN_vkCmdSetScissor = void function (
        VkCommandBuffer  commandBuffer,
        uint32_t         firstScissor,
        uint32_t         scissorCount,
        const(VkRect2D)* pScissors,
    );
    alias PFN_vkCmdSetLineWidth = void function (
        VkCommandBuffer commandBuffer,
        float           lineWidth,
    );
    alias PFN_vkCmdSetDepthBias = void function (
        VkCommandBuffer commandBuffer,
        float           depthBiasConstantFactor,
        float           depthBiasClamp,
        float           depthBiasSlopeFactor,
    );
    alias PFN_vkCmdSetBlendConstants = void function (
        VkCommandBuffer commandBuffer,
        const float[4]  blendConstants,
    );
    alias PFN_vkCmdSetDepthBounds = void function (
        VkCommandBuffer commandBuffer,
        float           minDepthBounds,
        float           maxDepthBounds,
    );
    alias PFN_vkCmdSetStencilCompareMask = void function (
        VkCommandBuffer    commandBuffer,
        VkStencilFaceFlags faceMask,
        uint32_t           compareMask,
    );
    alias PFN_vkCmdSetStencilWriteMask = void function (
        VkCommandBuffer    commandBuffer,
        VkStencilFaceFlags faceMask,
        uint32_t           writeMask,
    );
    alias PFN_vkCmdSetStencilReference = void function (
        VkCommandBuffer    commandBuffer,
        VkStencilFaceFlags faceMask,
        uint32_t           reference,
    );
    alias PFN_vkCmdBindDescriptorSets = void function (
        VkCommandBuffer         commandBuffer,
        VkPipelineBindPoint     pipelineBindPoint,
        VkPipelineLayout        layout,
        uint32_t                firstSet,
        uint32_t                descriptorSetCount,
        const(VkDescriptorSet)* pDescriptorSets,
        uint32_t                dynamicOffsetCount,
        const(uint32_t)*        pDynamicOffsets,
    );
    alias PFN_vkCmdBindIndexBuffer = void function (
        VkCommandBuffer commandBuffer,
        VkBuffer        buffer,
        VkDeviceSize    offset,
        VkIndexType     indexType,
    );
    alias PFN_vkCmdBindVertexBuffers = void function (
        VkCommandBuffer      commandBuffer,
        uint32_t             firstBinding,
        uint32_t             bindingCount,
        const(VkBuffer)*     pBuffers,
        const(VkDeviceSize)* pOffsets,
    );
    alias PFN_vkCmdDraw = void function (
        VkCommandBuffer commandBuffer,
        uint32_t        vertexCount,
        uint32_t        instanceCount,
        uint32_t        firstVertex,
        uint32_t        firstInstance,
    );
    alias PFN_vkCmdDrawIndexed = void function (
        VkCommandBuffer commandBuffer,
        uint32_t        indexCount,
        uint32_t        instanceCount,
        uint32_t        firstIndex,
        int32_t         vertexOffset,
        uint32_t        firstInstance,
    );
    alias PFN_vkCmdDrawIndirect = void function (
        VkCommandBuffer commandBuffer,
        VkBuffer        buffer,
        VkDeviceSize    offset,
        uint32_t        drawCount,
        uint32_t        stride,
    );
    alias PFN_vkCmdDrawIndexedIndirect = void function (
        VkCommandBuffer commandBuffer,
        VkBuffer        buffer,
        VkDeviceSize    offset,
        uint32_t        drawCount,
        uint32_t        stride,
    );
    alias PFN_vkCmdDispatch = void function (
        VkCommandBuffer commandBuffer,
        uint32_t        groupCountX,
        uint32_t        groupCountY,
        uint32_t        groupCountZ,
    );
    alias PFN_vkCmdDispatchIndirect = void function (
        VkCommandBuffer commandBuffer,
        VkBuffer        buffer,
        VkDeviceSize    offset,
    );
    alias PFN_vkCmdCopyBuffer = void function (
        VkCommandBuffer      commandBuffer,
        VkBuffer             srcBuffer,
        VkBuffer             dstBuffer,
        uint32_t             regionCount,
        const(VkBufferCopy)* pRegions,
    );
    alias PFN_vkCmdCopyImage = void function (
        VkCommandBuffer     commandBuffer,
        VkImage             srcImage,
        VkImageLayout       srcImageLayout,
        VkImage             dstImage,
        VkImageLayout       dstImageLayout,
        uint32_t            regionCount,
        const(VkImageCopy)* pRegions,
    );
    alias PFN_vkCmdBlitImage = void function (
        VkCommandBuffer     commandBuffer,
        VkImage             srcImage,
        VkImageLayout       srcImageLayout,
        VkImage             dstImage,
        VkImageLayout       dstImageLayout,
        uint32_t            regionCount,
        const(VkImageBlit)* pRegions,
        VkFilter            filter,
    );
    alias PFN_vkCmdCopyBufferToImage = void function (
        VkCommandBuffer           commandBuffer,
        VkBuffer                  srcBuffer,
        VkImage                   dstImage,
        VkImageLayout             dstImageLayout,
        uint32_t                  regionCount,
        const(VkBufferImageCopy)* pRegions,
    );
    alias PFN_vkCmdCopyImageToBuffer = void function (
        VkCommandBuffer           commandBuffer,
        VkImage                   srcImage,
        VkImageLayout             srcImageLayout,
        VkBuffer                  dstBuffer,
        uint32_t                  regionCount,
        const(VkBufferImageCopy)* pRegions,
    );
    alias PFN_vkCmdUpdateBuffer = void function (
        VkCommandBuffer commandBuffer,
        VkBuffer        dstBuffer,
        VkDeviceSize    dstOffset,
        VkDeviceSize    dataSize,
        const(void)*    pData,
    );
    alias PFN_vkCmdFillBuffer = void function (
        VkCommandBuffer commandBuffer,
        VkBuffer        dstBuffer,
        VkDeviceSize    dstOffset,
        VkDeviceSize    size,
        uint32_t        data,
    );
    alias PFN_vkCmdClearColorImage = void function (
        VkCommandBuffer                 commandBuffer,
        VkImage                         image,
        VkImageLayout                   imageLayout,
        const(VkClearColorValue)*       pColor,
        uint32_t                        rangeCount,
        const(VkImageSubresourceRange)* pRanges,
    );
    alias PFN_vkCmdClearDepthStencilImage = void function (
        VkCommandBuffer                  commandBuffer,
        VkImage                          image,
        VkImageLayout                    imageLayout,
        const(VkClearDepthStencilValue)* pDepthStencil,
        uint32_t                         rangeCount,
        const(VkImageSubresourceRange)*  pRanges,
    );
    alias PFN_vkCmdClearAttachments = void function (
        VkCommandBuffer           commandBuffer,
        uint32_t                  attachmentCount,
        const(VkClearAttachment)* pAttachments,
        uint32_t                  rectCount,
        const(VkClearRect)*       pRects,
    );
    alias PFN_vkCmdResolveImage = void function (
        VkCommandBuffer        commandBuffer,
        VkImage                srcImage,
        VkImageLayout          srcImageLayout,
        VkImage                dstImage,
        VkImageLayout          dstImageLayout,
        uint32_t               regionCount,
        const(VkImageResolve)* pRegions,
    );
    alias PFN_vkCmdSetEvent = void function (
        VkCommandBuffer      commandBuffer,
        VkEvent              event,
        VkPipelineStageFlags stageMask,
    );
    alias PFN_vkCmdResetEvent = void function (
        VkCommandBuffer      commandBuffer,
        VkEvent              event,
        VkPipelineStageFlags stageMask,
    );
    alias PFN_vkCmdWaitEvents = void function (
        VkCommandBuffer               commandBuffer,
        uint32_t                      eventCount,
        const(VkEvent)*               pEvents,
        VkPipelineStageFlags          srcStageMask,
        VkPipelineStageFlags          dstStageMask,
        uint32_t                      memoryBarrierCount,
        const(VkMemoryBarrier)*       pMemoryBarriers,
        uint32_t                      bufferMemoryBarrierCount,
        const(VkBufferMemoryBarrier)* pBufferMemoryBarriers,
        uint32_t                      imageMemoryBarrierCount,
        const(VkImageMemoryBarrier)*  pImageMemoryBarriers,
    );
    alias PFN_vkCmdPipelineBarrier = void function (
        VkCommandBuffer               commandBuffer,
        VkPipelineStageFlags          srcStageMask,
        VkPipelineStageFlags          dstStageMask,
        VkDependencyFlags             dependencyFlags,
        uint32_t                      memoryBarrierCount,
        const(VkMemoryBarrier)*       pMemoryBarriers,
        uint32_t                      bufferMemoryBarrierCount,
        const(VkBufferMemoryBarrier)* pBufferMemoryBarriers,
        uint32_t                      imageMemoryBarrierCount,
        const(VkImageMemoryBarrier)*  pImageMemoryBarriers,
    );
    alias PFN_vkCmdBeginQuery = void function (
        VkCommandBuffer     commandBuffer,
        VkQueryPool         queryPool,
        uint32_t            query,
        VkQueryControlFlags flags,
    );
    alias PFN_vkCmdEndQuery = void function (
        VkCommandBuffer commandBuffer,
        VkQueryPool     queryPool,
        uint32_t        query,
    );
    alias PFN_vkCmdResetQueryPool = void function (
        VkCommandBuffer commandBuffer,
        VkQueryPool     queryPool,
        uint32_t        firstQuery,
        uint32_t        queryCount,
    );
    alias PFN_vkCmdWriteTimestamp = void function (
        VkCommandBuffer         commandBuffer,
        VkPipelineStageFlagBits pipelineStage,
        VkQueryPool             queryPool,
        uint32_t                query,
    );
    alias PFN_vkCmdCopyQueryPoolResults = void function (
        VkCommandBuffer    commandBuffer,
        VkQueryPool        queryPool,
        uint32_t           firstQuery,
        uint32_t           queryCount,
        VkBuffer           dstBuffer,
        VkDeviceSize       dstOffset,
        VkDeviceSize       stride,
        VkQueryResultFlags flags,
    );
    alias PFN_vkCmdPushConstants = void function (
        VkCommandBuffer    commandBuffer,
        VkPipelineLayout   layout,
        VkShaderStageFlags stageFlags,
        uint32_t           offset,
        uint32_t           size,
        const(void)*       pValues,
    );
    alias PFN_vkCmdBeginRenderPass = void function (
        VkCommandBuffer               commandBuffer,
        const(VkRenderPassBeginInfo)* pRenderPassBegin,
        VkSubpassContents             contents,
    );
    alias PFN_vkCmdNextSubpass = void function (
        VkCommandBuffer   commandBuffer,
        VkSubpassContents contents,
    );
    alias PFN_vkCmdEndRenderPass = void function (VkCommandBuffer commandBuffer);
    alias PFN_vkCmdExecuteCommands = void function (
        VkCommandBuffer         commandBuffer,
        uint32_t                commandBufferCount,
        const(VkCommandBuffer)* pCommandBuffers,
    );

    // VK_KHR_surface
    alias PFN_vkDestroySurfaceKHR = void function (
        VkInstance                    instance,
        VkSurfaceKHR                  surface,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkGetPhysicalDeviceSurfaceSupportKHR = VkResult function (
        VkPhysicalDevice physicalDevice,
        uint32_t         queueFamilyIndex,
        VkSurfaceKHR     surface,
        VkBool32*        pSupported,
    );
    alias PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = VkResult function (
        VkPhysicalDevice          physicalDevice,
        VkSurfaceKHR              surface,
        VkSurfaceCapabilitiesKHR* pSurfaceCapabilities,
    );
    alias PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = VkResult function (
        VkPhysicalDevice    physicalDevice,
        VkSurfaceKHR        surface,
        uint32_t*           pSurfaceFormatCount,
        VkSurfaceFormatKHR* pSurfaceFormats,
    );
    alias PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = VkResult function (
        VkPhysicalDevice  physicalDevice,
        VkSurfaceKHR      surface,
        uint32_t*         pPresentModeCount,
        VkPresentModeKHR* pPresentModes,
    );

    // VK_KHR_swapchain
    alias PFN_vkCreateSwapchainKHR = VkResult function (
        VkDevice                         device,
        const(VkSwapchainCreateInfoKHR)* pCreateInfo,
        const(VkAllocationCallbacks)*    pAllocator,
        VkSwapchainKHR*                  pSwapchain,
    );
    alias PFN_vkDestroySwapchainKHR = void function (
        VkDevice                      device,
        VkSwapchainKHR                swapchain,
        const(VkAllocationCallbacks)* pAllocator,
    );
    alias PFN_vkGetSwapchainImagesKHR = VkResult function (
        VkDevice       device,
        VkSwapchainKHR swapchain,
        uint32_t*      pSwapchainImageCount,
        VkImage*       pSwapchainImages,
    );
    alias PFN_vkAcquireNextImageKHR = VkResult function (
        VkDevice       device,
        VkSwapchainKHR swapchain,
        uint64_t       timeout,
        VkSemaphore    semaphore,
        VkFence        fence,
        uint32_t*      pImageIndex,
    );
    alias PFN_vkQueuePresentKHR = VkResult function (
        VkQueue                  queue,
        const(VkPresentInfoKHR)* pPresentInfo,
    );

    // VK_KHR_display
    alias PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = VkResult function (
        VkPhysicalDevice        physicalDevice,
        uint32_t*               pPropertyCount,
        VkDisplayPropertiesKHR* pProperties,
    );
    alias PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = VkResult function (
        VkPhysicalDevice             physicalDevice,
        uint32_t*                    pPropertyCount,
        VkDisplayPlanePropertiesKHR* pProperties,
    );
    alias PFN_vkGetDisplayPlaneSupportedDisplaysKHR = VkResult function (
        VkPhysicalDevice physicalDevice,
        uint32_t         planeIndex,
        uint32_t*        pDisplayCount,
        VkDisplayKHR*    pDisplays,
    );
    alias PFN_vkGetDisplayModePropertiesKHR = VkResult function (
        VkPhysicalDevice            physicalDevice,
        VkDisplayKHR                display,
        uint32_t*                   pPropertyCount,
        VkDisplayModePropertiesKHR* pProperties,
    );
    alias PFN_vkCreateDisplayModeKHR = VkResult function (
        VkPhysicalDevice                   physicalDevice,
        VkDisplayKHR                       display,
        const(VkDisplayModeCreateInfoKHR)* pCreateInfo,
        const(VkAllocationCallbacks)*      pAllocator,
        VkDisplayModeKHR*                  pMode,
    );
    alias PFN_vkGetDisplayPlaneCapabilitiesKHR = VkResult function (
        VkPhysicalDevice               physicalDevice,
        VkDisplayModeKHR               mode,
        uint32_t                       planeIndex,
        VkDisplayPlaneCapabilitiesKHR* pCapabilities,
    );
    alias PFN_vkCreateDisplayPlaneSurfaceKHR = VkResult function (
        VkInstance                            instance,
        const(VkDisplaySurfaceCreateInfoKHR)* pCreateInfo,
        const(VkAllocationCallbacks)*         pAllocator,
        VkSurfaceKHR*                         pSurface,
    );

    // VK_KHR_wayland_surface
    version(linux) {
        alias PFN_vkCreateWaylandSurfaceKHR = VkResult function (
            VkInstance                            instance,
            const(VkWaylandSurfaceCreateInfoKHR)* pCreateInfo,
            const(VkAllocationCallbacks)*         pAllocator,
            VkSurfaceKHR*                         pSurface,
        );
        alias PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR = VkBool32 function (
            VkPhysicalDevice physicalDevice,
            uint32_t         queueFamilyIndex,
            wl_display*      display,
        );
    }
}


// Global commands

final class VkGlobalCmds {
    PFN_vkCreateInstance                       createInstance;
    PFN_vkGetInstanceProcAddr                  getInstanceProcAddr;
    PFN_vkEnumerateInstanceExtensionProperties enumerateInstanceExtensionProperties;
    PFN_vkEnumerateInstanceLayerProperties     enumerateInstanceLayerProperties;

    this (PFN_vkGetInstanceProcAddr loader) {
        getInstanceProcAddr = loader;
        createInstance                       = cast(PFN_vkCreateInstance)                      loader(null, "vkCreateInstance");
        enumerateInstanceExtensionProperties = cast(PFN_vkEnumerateInstanceExtensionProperties)loader(null, "vkEnumerateInstanceExtensionProperties");
        enumerateInstanceLayerProperties     = cast(PFN_vkEnumerateInstanceLayerProperties)    loader(null, "vkEnumerateInstanceLayerProperties");
    }
}

// Instance commands

final class VkInstanceCmds {
    // VK_VERSION_1_0
    PFN_vkDestroyInstance                                destroyInstance;
    PFN_vkEnumeratePhysicalDevices                       enumeratePhysicalDevices;
    PFN_vkGetPhysicalDeviceFeatures                      getPhysicalDeviceFeatures;
    PFN_vkGetPhysicalDeviceFormatProperties              getPhysicalDeviceFormatProperties;
    PFN_vkGetPhysicalDeviceImageFormatProperties         getPhysicalDeviceImageFormatProperties;
    PFN_vkGetPhysicalDeviceProperties                    getPhysicalDeviceProperties;
    PFN_vkGetPhysicalDeviceQueueFamilyProperties         getPhysicalDeviceQueueFamilyProperties;
    PFN_vkGetPhysicalDeviceMemoryProperties              getPhysicalDeviceMemoryProperties;
    PFN_vkGetDeviceProcAddr                              getDeviceProcAddr;
    PFN_vkCreateDevice                                   createDevice;
    PFN_vkEnumerateDeviceExtensionProperties             enumerateDeviceExtensionProperties;
    PFN_vkEnumerateDeviceLayerProperties                 enumerateDeviceLayerProperties;
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties   getPhysicalDeviceSparseImageFormatProperties;

    // VK_KHR_surface
    PFN_vkDestroySurfaceKHR                              destroySurfaceKHR;
    PFN_vkGetPhysicalDeviceSurfaceSupportKHR             getPhysicalDeviceSurfaceSupportKHR;
    PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR        getPhysicalDeviceSurfaceCapabilitiesKHR;
    PFN_vkGetPhysicalDeviceSurfaceFormatsKHR             getPhysicalDeviceSurfaceFormatsKHR;
    PFN_vkGetPhysicalDeviceSurfacePresentModesKHR        getPhysicalDeviceSurfacePresentModesKHR;

    // VK_KHR_display
    PFN_vkGetPhysicalDeviceDisplayPropertiesKHR          getPhysicalDeviceDisplayPropertiesKHR;
    PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR     getPhysicalDeviceDisplayPlanePropertiesKHR;
    PFN_vkGetDisplayPlaneSupportedDisplaysKHR            getDisplayPlaneSupportedDisplaysKHR;
    PFN_vkGetDisplayModePropertiesKHR                    getDisplayModePropertiesKHR;
    PFN_vkCreateDisplayModeKHR                           createDisplayModeKHR;
    PFN_vkGetDisplayPlaneCapabilitiesKHR                 getDisplayPlaneCapabilitiesKHR;
    PFN_vkCreateDisplayPlaneSurfaceKHR                   createDisplayPlaneSurfaceKHR;

    // VK_KHR_wayland_surface
    version(linux) {
        PFN_vkCreateWaylandSurfaceKHR                        createWaylandSurfaceKHR;
        PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR getPhysicalDeviceWaylandPresentationSupportKHR;
    }

    this (VkInstance instance, VkGlobalCmds globalCmds) {
        auto loader = globalCmds.getInstanceProcAddr;
        // VK_VERSION_1_0
        destroyInstance                                = cast(PFN_vkDestroyInstance)                               loader(instance, "vkDestroyInstance");
        enumeratePhysicalDevices                       = cast(PFN_vkEnumeratePhysicalDevices)                      loader(instance, "vkEnumeratePhysicalDevices");
        getPhysicalDeviceFeatures                      = cast(PFN_vkGetPhysicalDeviceFeatures)                     loader(instance, "vkGetPhysicalDeviceFeatures");
        getPhysicalDeviceFormatProperties              = cast(PFN_vkGetPhysicalDeviceFormatProperties)             loader(instance, "vkGetPhysicalDeviceFormatProperties");
        getPhysicalDeviceImageFormatProperties         = cast(PFN_vkGetPhysicalDeviceImageFormatProperties)        loader(instance, "vkGetPhysicalDeviceImageFormatProperties");
        getPhysicalDeviceProperties                    = cast(PFN_vkGetPhysicalDeviceProperties)                   loader(instance, "vkGetPhysicalDeviceProperties");
        getPhysicalDeviceQueueFamilyProperties         = cast(PFN_vkGetPhysicalDeviceQueueFamilyProperties)        loader(instance, "vkGetPhysicalDeviceQueueFamilyProperties");
        getPhysicalDeviceMemoryProperties              = cast(PFN_vkGetPhysicalDeviceMemoryProperties)             loader(instance, "vkGetPhysicalDeviceMemoryProperties");
        getDeviceProcAddr                              = cast(PFN_vkGetDeviceProcAddr)                             loader(instance, "vkGetDeviceProcAddr");
        createDevice                                   = cast(PFN_vkCreateDevice)                                  loader(instance, "vkCreateDevice");
        enumerateDeviceExtensionProperties             = cast(PFN_vkEnumerateDeviceExtensionProperties)            loader(instance, "vkEnumerateDeviceExtensionProperties");
        enumerateDeviceLayerProperties                 = cast(PFN_vkEnumerateDeviceLayerProperties)                loader(instance, "vkEnumerateDeviceLayerProperties");
        getPhysicalDeviceSparseImageFormatProperties   = cast(PFN_vkGetPhysicalDeviceSparseImageFormatProperties)  loader(instance, "vkGetPhysicalDeviceSparseImageFormatProperties");

        // VK_KHR_surface
        destroySurfaceKHR                              = cast(PFN_vkDestroySurfaceKHR)                             loader(instance, "vkDestroySurfaceKHR");
        getPhysicalDeviceSurfaceSupportKHR             = cast(PFN_vkGetPhysicalDeviceSurfaceSupportKHR)            loader(instance, "vkGetPhysicalDeviceSurfaceSupportKHR");
        getPhysicalDeviceSurfaceCapabilitiesKHR        = cast(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)       loader(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
        getPhysicalDeviceSurfaceFormatsKHR             = cast(PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)            loader(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
        getPhysicalDeviceSurfacePresentModesKHR        = cast(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)       loader(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR");

        // VK_KHR_display
        getPhysicalDeviceDisplayPropertiesKHR          = cast(PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)         loader(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
        getPhysicalDeviceDisplayPlanePropertiesKHR     = cast(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)    loader(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
        getDisplayPlaneSupportedDisplaysKHR            = cast(PFN_vkGetDisplayPlaneSupportedDisplaysKHR)           loader(instance, "vkGetDisplayPlaneSupportedDisplaysKHR");
        getDisplayModePropertiesKHR                    = cast(PFN_vkGetDisplayModePropertiesKHR)                   loader(instance, "vkGetDisplayModePropertiesKHR");
        createDisplayModeKHR                           = cast(PFN_vkCreateDisplayModeKHR)                          loader(instance, "vkCreateDisplayModeKHR");
        getDisplayPlaneCapabilitiesKHR                 = cast(PFN_vkGetDisplayPlaneCapabilitiesKHR)                loader(instance, "vkGetDisplayPlaneCapabilitiesKHR");
        createDisplayPlaneSurfaceKHR                   = cast(PFN_vkCreateDisplayPlaneSurfaceKHR)                  loader(instance, "vkCreateDisplayPlaneSurfaceKHR");

        // VK_KHR_wayland_surface
        version(linux) {
            createWaylandSurfaceKHR                        = cast(PFN_vkCreateWaylandSurfaceKHR)                       loader(instance, "vkCreateWaylandSurfaceKHR");
            getPhysicalDeviceWaylandPresentationSupportKHR = cast(PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)loader(instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
        }
    }
}

// Device commands

final class VkDeviceCmds {
    // VK_VERSION_1_0
    PFN_vkDestroyDevice                    destroyDevice;
    PFN_vkGetDeviceQueue                   getDeviceQueue;
    PFN_vkQueueSubmit                      queueSubmit;
    PFN_vkQueueWaitIdle                    queueWaitIdle;
    PFN_vkDeviceWaitIdle                   deviceWaitIdle;
    PFN_vkAllocateMemory                   allocateMemory;
    PFN_vkFreeMemory                       freeMemory;
    PFN_vkMapMemory                        mapMemory;
    PFN_vkUnmapMemory                      unmapMemory;
    PFN_vkFlushMappedMemoryRanges          flushMappedMemoryRanges;
    PFN_vkInvalidateMappedMemoryRanges     invalidateMappedMemoryRanges;
    PFN_vkGetDeviceMemoryCommitment        getDeviceMemoryCommitment;
    PFN_vkBindBufferMemory                 bindBufferMemory;
    PFN_vkBindImageMemory                  bindImageMemory;
    PFN_vkGetBufferMemoryRequirements      getBufferMemoryRequirements;
    PFN_vkGetImageMemoryRequirements       getImageMemoryRequirements;
    PFN_vkGetImageSparseMemoryRequirements getImageSparseMemoryRequirements;
    PFN_vkQueueBindSparse                  queueBindSparse;
    PFN_vkCreateFence                      createFence;
    PFN_vkDestroyFence                     destroyFence;
    PFN_vkResetFences                      resetFences;
    PFN_vkGetFenceStatus                   getFenceStatus;
    PFN_vkWaitForFences                    waitForFences;
    PFN_vkCreateSemaphore                  createSemaphore;
    PFN_vkDestroySemaphore                 destroySemaphore;
    PFN_vkCreateEvent                      createEvent;
    PFN_vkDestroyEvent                     destroyEvent;
    PFN_vkGetEventStatus                   getEventStatus;
    PFN_vkSetEvent                         setEvent;
    PFN_vkResetEvent                       resetEvent;
    PFN_vkCreateQueryPool                  createQueryPool;
    PFN_vkDestroyQueryPool                 destroyQueryPool;
    PFN_vkGetQueryPoolResults              getQueryPoolResults;
    PFN_vkCreateBuffer                     createBuffer;
    PFN_vkDestroyBuffer                    destroyBuffer;
    PFN_vkCreateBufferView                 createBufferView;
    PFN_vkDestroyBufferView                destroyBufferView;
    PFN_vkCreateImage                      createImage;
    PFN_vkDestroyImage                     destroyImage;
    PFN_vkGetImageSubresourceLayout        getImageSubresourceLayout;
    PFN_vkCreateImageView                  createImageView;
    PFN_vkDestroyImageView                 destroyImageView;
    PFN_vkCreateShaderModule               createShaderModule;
    PFN_vkDestroyShaderModule              destroyShaderModule;
    PFN_vkCreatePipelineCache              createPipelineCache;
    PFN_vkDestroyPipelineCache             destroyPipelineCache;
    PFN_vkGetPipelineCacheData             getPipelineCacheData;
    PFN_vkMergePipelineCaches              mergePipelineCaches;
    PFN_vkCreateGraphicsPipelines          createGraphicsPipelines;
    PFN_vkCreateComputePipelines           createComputePipelines;
    PFN_vkDestroyPipeline                  destroyPipeline;
    PFN_vkCreatePipelineLayout             createPipelineLayout;
    PFN_vkDestroyPipelineLayout            destroyPipelineLayout;
    PFN_vkCreateSampler                    createSampler;
    PFN_vkDestroySampler                   destroySampler;
    PFN_vkCreateDescriptorSetLayout        createDescriptorSetLayout;
    PFN_vkDestroyDescriptorSetLayout       destroyDescriptorSetLayout;
    PFN_vkCreateDescriptorPool             createDescriptorPool;
    PFN_vkDestroyDescriptorPool            destroyDescriptorPool;
    PFN_vkResetDescriptorPool              resetDescriptorPool;
    PFN_vkAllocateDescriptorSets           allocateDescriptorSets;
    PFN_vkFreeDescriptorSets               freeDescriptorSets;
    PFN_vkUpdateDescriptorSets             updateDescriptorSets;
    PFN_vkCreateFramebuffer                createFramebuffer;
    PFN_vkDestroyFramebuffer               destroyFramebuffer;
    PFN_vkCreateRenderPass                 createRenderPass;
    PFN_vkDestroyRenderPass                destroyRenderPass;
    PFN_vkGetRenderAreaGranularity         getRenderAreaGranularity;
    PFN_vkCreateCommandPool                createCommandPool;
    PFN_vkDestroyCommandPool               destroyCommandPool;
    PFN_vkResetCommandPool                 resetCommandPool;
    PFN_vkAllocateCommandBuffers           allocateCommandBuffers;
    PFN_vkFreeCommandBuffers               freeCommandBuffers;
    PFN_vkBeginCommandBuffer               beginCommandBuffer;
    PFN_vkEndCommandBuffer                 endCommandBuffer;
    PFN_vkResetCommandBuffer               resetCommandBuffer;
    PFN_vkCmdBindPipeline                  cmdBindPipeline;
    PFN_vkCmdSetViewport                   cmdSetViewport;
    PFN_vkCmdSetScissor                    cmdSetScissor;
    PFN_vkCmdSetLineWidth                  cmdSetLineWidth;
    PFN_vkCmdSetDepthBias                  cmdSetDepthBias;
    PFN_vkCmdSetBlendConstants             cmdSetBlendConstants;
    PFN_vkCmdSetDepthBounds                cmdSetDepthBounds;
    PFN_vkCmdSetStencilCompareMask         cmdSetStencilCompareMask;
    PFN_vkCmdSetStencilWriteMask           cmdSetStencilWriteMask;
    PFN_vkCmdSetStencilReference           cmdSetStencilReference;
    PFN_vkCmdBindDescriptorSets            cmdBindDescriptorSets;
    PFN_vkCmdBindIndexBuffer               cmdBindIndexBuffer;
    PFN_vkCmdBindVertexBuffers             cmdBindVertexBuffers;
    PFN_vkCmdDraw                          cmdDraw;
    PFN_vkCmdDrawIndexed                   cmdDrawIndexed;
    PFN_vkCmdDrawIndirect                  cmdDrawIndirect;
    PFN_vkCmdDrawIndexedIndirect           cmdDrawIndexedIndirect;
    PFN_vkCmdDispatch                      cmdDispatch;
    PFN_vkCmdDispatchIndirect              cmdDispatchIndirect;
    PFN_vkCmdCopyBuffer                    cmdCopyBuffer;
    PFN_vkCmdCopyImage                     cmdCopyImage;
    PFN_vkCmdBlitImage                     cmdBlitImage;
    PFN_vkCmdCopyBufferToImage             cmdCopyBufferToImage;
    PFN_vkCmdCopyImageToBuffer             cmdCopyImageToBuffer;
    PFN_vkCmdUpdateBuffer                  cmdUpdateBuffer;
    PFN_vkCmdFillBuffer                    cmdFillBuffer;
    PFN_vkCmdClearColorImage               cmdClearColorImage;
    PFN_vkCmdClearDepthStencilImage        cmdClearDepthStencilImage;
    PFN_vkCmdClearAttachments              cmdClearAttachments;
    PFN_vkCmdResolveImage                  cmdResolveImage;
    PFN_vkCmdSetEvent                      cmdSetEvent;
    PFN_vkCmdResetEvent                    cmdResetEvent;
    PFN_vkCmdWaitEvents                    cmdWaitEvents;
    PFN_vkCmdPipelineBarrier               cmdPipelineBarrier;
    PFN_vkCmdBeginQuery                    cmdBeginQuery;
    PFN_vkCmdEndQuery                      cmdEndQuery;
    PFN_vkCmdResetQueryPool                cmdResetQueryPool;
    PFN_vkCmdWriteTimestamp                cmdWriteTimestamp;
    PFN_vkCmdCopyQueryPoolResults          cmdCopyQueryPoolResults;
    PFN_vkCmdPushConstants                 cmdPushConstants;
    PFN_vkCmdBeginRenderPass               cmdBeginRenderPass;
    PFN_vkCmdNextSubpass                   cmdNextSubpass;
    PFN_vkCmdEndRenderPass                 cmdEndRenderPass;
    PFN_vkCmdExecuteCommands               cmdExecuteCommands;

    // VK_KHR_swapchain
    PFN_vkCreateSwapchainKHR               createSwapchainKHR;
    PFN_vkDestroySwapchainKHR              destroySwapchainKHR;
    PFN_vkGetSwapchainImagesKHR            getSwapchainImagesKHR;
    PFN_vkAcquireNextImageKHR              acquireNextImageKHR;
    PFN_vkQueuePresentKHR                  queuePresentKHR;

    this (VkDevice device, VkInstanceCmds instanceCmds) {
        auto loader = instanceCmds.getDeviceProcAddr;
        // VK_VERSION_1_0
        destroyDevice                    = cast(PFN_vkDestroyDevice)                   loader(device, "vkDestroyDevice");
        getDeviceQueue                   = cast(PFN_vkGetDeviceQueue)                  loader(device, "vkGetDeviceQueue");
        queueSubmit                      = cast(PFN_vkQueueSubmit)                     loader(device, "vkQueueSubmit");
        queueWaitIdle                    = cast(PFN_vkQueueWaitIdle)                   loader(device, "vkQueueWaitIdle");
        deviceWaitIdle                   = cast(PFN_vkDeviceWaitIdle)                  loader(device, "vkDeviceWaitIdle");
        allocateMemory                   = cast(PFN_vkAllocateMemory)                  loader(device, "vkAllocateMemory");
        freeMemory                       = cast(PFN_vkFreeMemory)                      loader(device, "vkFreeMemory");
        mapMemory                        = cast(PFN_vkMapMemory)                       loader(device, "vkMapMemory");
        unmapMemory                      = cast(PFN_vkUnmapMemory)                     loader(device, "vkUnmapMemory");
        flushMappedMemoryRanges          = cast(PFN_vkFlushMappedMemoryRanges)         loader(device, "vkFlushMappedMemoryRanges");
        invalidateMappedMemoryRanges     = cast(PFN_vkInvalidateMappedMemoryRanges)    loader(device, "vkInvalidateMappedMemoryRanges");
        getDeviceMemoryCommitment        = cast(PFN_vkGetDeviceMemoryCommitment)       loader(device, "vkGetDeviceMemoryCommitment");
        bindBufferMemory                 = cast(PFN_vkBindBufferMemory)                loader(device, "vkBindBufferMemory");
        bindImageMemory                  = cast(PFN_vkBindImageMemory)                 loader(device, "vkBindImageMemory");
        getBufferMemoryRequirements      = cast(PFN_vkGetBufferMemoryRequirements)     loader(device, "vkGetBufferMemoryRequirements");
        getImageMemoryRequirements       = cast(PFN_vkGetImageMemoryRequirements)      loader(device, "vkGetImageMemoryRequirements");
        getImageSparseMemoryRequirements = cast(PFN_vkGetImageSparseMemoryRequirements)loader(device, "vkGetImageSparseMemoryRequirements");
        queueBindSparse                  = cast(PFN_vkQueueBindSparse)                 loader(device, "vkQueueBindSparse");
        createFence                      = cast(PFN_vkCreateFence)                     loader(device, "vkCreateFence");
        destroyFence                     = cast(PFN_vkDestroyFence)                    loader(device, "vkDestroyFence");
        resetFences                      = cast(PFN_vkResetFences)                     loader(device, "vkResetFences");
        getFenceStatus                   = cast(PFN_vkGetFenceStatus)                  loader(device, "vkGetFenceStatus");
        waitForFences                    = cast(PFN_vkWaitForFences)                   loader(device, "vkWaitForFences");
        createSemaphore                  = cast(PFN_vkCreateSemaphore)                 loader(device, "vkCreateSemaphore");
        destroySemaphore                 = cast(PFN_vkDestroySemaphore)                loader(device, "vkDestroySemaphore");
        createEvent                      = cast(PFN_vkCreateEvent)                     loader(device, "vkCreateEvent");
        destroyEvent                     = cast(PFN_vkDestroyEvent)                    loader(device, "vkDestroyEvent");
        getEventStatus                   = cast(PFN_vkGetEventStatus)                  loader(device, "vkGetEventStatus");
        setEvent                         = cast(PFN_vkSetEvent)                        loader(device, "vkSetEvent");
        resetEvent                       = cast(PFN_vkResetEvent)                      loader(device, "vkResetEvent");
        createQueryPool                  = cast(PFN_vkCreateQueryPool)                 loader(device, "vkCreateQueryPool");
        destroyQueryPool                 = cast(PFN_vkDestroyQueryPool)                loader(device, "vkDestroyQueryPool");
        getQueryPoolResults              = cast(PFN_vkGetQueryPoolResults)             loader(device, "vkGetQueryPoolResults");
        createBuffer                     = cast(PFN_vkCreateBuffer)                    loader(device, "vkCreateBuffer");
        destroyBuffer                    = cast(PFN_vkDestroyBuffer)                   loader(device, "vkDestroyBuffer");
        createBufferView                 = cast(PFN_vkCreateBufferView)                loader(device, "vkCreateBufferView");
        destroyBufferView                = cast(PFN_vkDestroyBufferView)               loader(device, "vkDestroyBufferView");
        createImage                      = cast(PFN_vkCreateImage)                     loader(device, "vkCreateImage");
        destroyImage                     = cast(PFN_vkDestroyImage)                    loader(device, "vkDestroyImage");
        getImageSubresourceLayout        = cast(PFN_vkGetImageSubresourceLayout)       loader(device, "vkGetImageSubresourceLayout");
        createImageView                  = cast(PFN_vkCreateImageView)                 loader(device, "vkCreateImageView");
        destroyImageView                 = cast(PFN_vkDestroyImageView)                loader(device, "vkDestroyImageView");
        createShaderModule               = cast(PFN_vkCreateShaderModule)              loader(device, "vkCreateShaderModule");
        destroyShaderModule              = cast(PFN_vkDestroyShaderModule)             loader(device, "vkDestroyShaderModule");
        createPipelineCache              = cast(PFN_vkCreatePipelineCache)             loader(device, "vkCreatePipelineCache");
        destroyPipelineCache             = cast(PFN_vkDestroyPipelineCache)            loader(device, "vkDestroyPipelineCache");
        getPipelineCacheData             = cast(PFN_vkGetPipelineCacheData)            loader(device, "vkGetPipelineCacheData");
        mergePipelineCaches              = cast(PFN_vkMergePipelineCaches)             loader(device, "vkMergePipelineCaches");
        createGraphicsPipelines          = cast(PFN_vkCreateGraphicsPipelines)         loader(device, "vkCreateGraphicsPipelines");
        createComputePipelines           = cast(PFN_vkCreateComputePipelines)          loader(device, "vkCreateComputePipelines");
        destroyPipeline                  = cast(PFN_vkDestroyPipeline)                 loader(device, "vkDestroyPipeline");
        createPipelineLayout             = cast(PFN_vkCreatePipelineLayout)            loader(device, "vkCreatePipelineLayout");
        destroyPipelineLayout            = cast(PFN_vkDestroyPipelineLayout)           loader(device, "vkDestroyPipelineLayout");
        createSampler                    = cast(PFN_vkCreateSampler)                   loader(device, "vkCreateSampler");
        destroySampler                   = cast(PFN_vkDestroySampler)                  loader(device, "vkDestroySampler");
        createDescriptorSetLayout        = cast(PFN_vkCreateDescriptorSetLayout)       loader(device, "vkCreateDescriptorSetLayout");
        destroyDescriptorSetLayout       = cast(PFN_vkDestroyDescriptorSetLayout)      loader(device, "vkDestroyDescriptorSetLayout");
        createDescriptorPool             = cast(PFN_vkCreateDescriptorPool)            loader(device, "vkCreateDescriptorPool");
        destroyDescriptorPool            = cast(PFN_vkDestroyDescriptorPool)           loader(device, "vkDestroyDescriptorPool");
        resetDescriptorPool              = cast(PFN_vkResetDescriptorPool)             loader(device, "vkResetDescriptorPool");
        allocateDescriptorSets           = cast(PFN_vkAllocateDescriptorSets)          loader(device, "vkAllocateDescriptorSets");
        freeDescriptorSets               = cast(PFN_vkFreeDescriptorSets)              loader(device, "vkFreeDescriptorSets");
        updateDescriptorSets             = cast(PFN_vkUpdateDescriptorSets)            loader(device, "vkUpdateDescriptorSets");
        createFramebuffer                = cast(PFN_vkCreateFramebuffer)               loader(device, "vkCreateFramebuffer");
        destroyFramebuffer               = cast(PFN_vkDestroyFramebuffer)              loader(device, "vkDestroyFramebuffer");
        createRenderPass                 = cast(PFN_vkCreateRenderPass)                loader(device, "vkCreateRenderPass");
        destroyRenderPass                = cast(PFN_vkDestroyRenderPass)               loader(device, "vkDestroyRenderPass");
        getRenderAreaGranularity         = cast(PFN_vkGetRenderAreaGranularity)        loader(device, "vkGetRenderAreaGranularity");
        createCommandPool                = cast(PFN_vkCreateCommandPool)               loader(device, "vkCreateCommandPool");
        destroyCommandPool               = cast(PFN_vkDestroyCommandPool)              loader(device, "vkDestroyCommandPool");
        resetCommandPool                 = cast(PFN_vkResetCommandPool)                loader(device, "vkResetCommandPool");
        allocateCommandBuffers           = cast(PFN_vkAllocateCommandBuffers)          loader(device, "vkAllocateCommandBuffers");
        freeCommandBuffers               = cast(PFN_vkFreeCommandBuffers)              loader(device, "vkFreeCommandBuffers");
        beginCommandBuffer               = cast(PFN_vkBeginCommandBuffer)              loader(device, "vkBeginCommandBuffer");
        endCommandBuffer                 = cast(PFN_vkEndCommandBuffer)                loader(device, "vkEndCommandBuffer");
        resetCommandBuffer               = cast(PFN_vkResetCommandBuffer)              loader(device, "vkResetCommandBuffer");
        cmdBindPipeline                  = cast(PFN_vkCmdBindPipeline)                 loader(device, "vkCmdBindPipeline");
        cmdSetViewport                   = cast(PFN_vkCmdSetViewport)                  loader(device, "vkCmdSetViewport");
        cmdSetScissor                    = cast(PFN_vkCmdSetScissor)                   loader(device, "vkCmdSetScissor");
        cmdSetLineWidth                  = cast(PFN_vkCmdSetLineWidth)                 loader(device, "vkCmdSetLineWidth");
        cmdSetDepthBias                  = cast(PFN_vkCmdSetDepthBias)                 loader(device, "vkCmdSetDepthBias");
        cmdSetBlendConstants             = cast(PFN_vkCmdSetBlendConstants)            loader(device, "vkCmdSetBlendConstants");
        cmdSetDepthBounds                = cast(PFN_vkCmdSetDepthBounds)               loader(device, "vkCmdSetDepthBounds");
        cmdSetStencilCompareMask         = cast(PFN_vkCmdSetStencilCompareMask)        loader(device, "vkCmdSetStencilCompareMask");
        cmdSetStencilWriteMask           = cast(PFN_vkCmdSetStencilWriteMask)          loader(device, "vkCmdSetStencilWriteMask");
        cmdSetStencilReference           = cast(PFN_vkCmdSetStencilReference)          loader(device, "vkCmdSetStencilReference");
        cmdBindDescriptorSets            = cast(PFN_vkCmdBindDescriptorSets)           loader(device, "vkCmdBindDescriptorSets");
        cmdBindIndexBuffer               = cast(PFN_vkCmdBindIndexBuffer)              loader(device, "vkCmdBindIndexBuffer");
        cmdBindVertexBuffers             = cast(PFN_vkCmdBindVertexBuffers)            loader(device, "vkCmdBindVertexBuffers");
        cmdDraw                          = cast(PFN_vkCmdDraw)                         loader(device, "vkCmdDraw");
        cmdDrawIndexed                   = cast(PFN_vkCmdDrawIndexed)                  loader(device, "vkCmdDrawIndexed");
        cmdDrawIndirect                  = cast(PFN_vkCmdDrawIndirect)                 loader(device, "vkCmdDrawIndirect");
        cmdDrawIndexedIndirect           = cast(PFN_vkCmdDrawIndexedIndirect)          loader(device, "vkCmdDrawIndexedIndirect");
        cmdDispatch                      = cast(PFN_vkCmdDispatch)                     loader(device, "vkCmdDispatch");
        cmdDispatchIndirect              = cast(PFN_vkCmdDispatchIndirect)             loader(device, "vkCmdDispatchIndirect");
        cmdCopyBuffer                    = cast(PFN_vkCmdCopyBuffer)                   loader(device, "vkCmdCopyBuffer");
        cmdCopyImage                     = cast(PFN_vkCmdCopyImage)                    loader(device, "vkCmdCopyImage");
        cmdBlitImage                     = cast(PFN_vkCmdBlitImage)                    loader(device, "vkCmdBlitImage");
        cmdCopyBufferToImage             = cast(PFN_vkCmdCopyBufferToImage)            loader(device, "vkCmdCopyBufferToImage");
        cmdCopyImageToBuffer             = cast(PFN_vkCmdCopyImageToBuffer)            loader(device, "vkCmdCopyImageToBuffer");
        cmdUpdateBuffer                  = cast(PFN_vkCmdUpdateBuffer)                 loader(device, "vkCmdUpdateBuffer");
        cmdFillBuffer                    = cast(PFN_vkCmdFillBuffer)                   loader(device, "vkCmdFillBuffer");
        cmdClearColorImage               = cast(PFN_vkCmdClearColorImage)              loader(device, "vkCmdClearColorImage");
        cmdClearDepthStencilImage        = cast(PFN_vkCmdClearDepthStencilImage)       loader(device, "vkCmdClearDepthStencilImage");
        cmdClearAttachments              = cast(PFN_vkCmdClearAttachments)             loader(device, "vkCmdClearAttachments");
        cmdResolveImage                  = cast(PFN_vkCmdResolveImage)                 loader(device, "vkCmdResolveImage");
        cmdSetEvent                      = cast(PFN_vkCmdSetEvent)                     loader(device, "vkCmdSetEvent");
        cmdResetEvent                    = cast(PFN_vkCmdResetEvent)                   loader(device, "vkCmdResetEvent");
        cmdWaitEvents                    = cast(PFN_vkCmdWaitEvents)                   loader(device, "vkCmdWaitEvents");
        cmdPipelineBarrier               = cast(PFN_vkCmdPipelineBarrier)              loader(device, "vkCmdPipelineBarrier");
        cmdBeginQuery                    = cast(PFN_vkCmdBeginQuery)                   loader(device, "vkCmdBeginQuery");
        cmdEndQuery                      = cast(PFN_vkCmdEndQuery)                     loader(device, "vkCmdEndQuery");
        cmdResetQueryPool                = cast(PFN_vkCmdResetQueryPool)               loader(device, "vkCmdResetQueryPool");
        cmdWriteTimestamp                = cast(PFN_vkCmdWriteTimestamp)               loader(device, "vkCmdWriteTimestamp");
        cmdCopyQueryPoolResults          = cast(PFN_vkCmdCopyQueryPoolResults)         loader(device, "vkCmdCopyQueryPoolResults");
        cmdPushConstants                 = cast(PFN_vkCmdPushConstants)                loader(device, "vkCmdPushConstants");
        cmdBeginRenderPass               = cast(PFN_vkCmdBeginRenderPass)              loader(device, "vkCmdBeginRenderPass");
        cmdNextSubpass                   = cast(PFN_vkCmdNextSubpass)                  loader(device, "vkCmdNextSubpass");
        cmdEndRenderPass                 = cast(PFN_vkCmdEndRenderPass)                loader(device, "vkCmdEndRenderPass");
        cmdExecuteCommands               = cast(PFN_vkCmdExecuteCommands)              loader(device, "vkCmdExecuteCommands");

        // VK_KHR_swapchain
        createSwapchainKHR               = cast(PFN_vkCreateSwapchainKHR)              loader(device, "vkCreateSwapchainKHR");
        destroySwapchainKHR              = cast(PFN_vkDestroySwapchainKHR)             loader(device, "vkDestroySwapchainKHR");
        getSwapchainImagesKHR            = cast(PFN_vkGetSwapchainImagesKHR)           loader(device, "vkGetSwapchainImagesKHR");
        acquireNextImageKHR              = cast(PFN_vkAcquireNextImageKHR)             loader(device, "vkAcquireNextImageKHR");
        queuePresentKHR                  = cast(PFN_vkQueuePresentKHR)                 loader(device, "vkQueuePresentKHR");
    }
}
